// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package models

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	BasicAuthScopes  = "basicAuth.Scopes"
	MTLSScopes       = "mTLS.Scopes"
)

// Check defines model for Check.
type Check struct {
	CreatedAt             time.Time `json:"createdAt"`
	DelegatedOIN          *string   `json:"delegatedOIN,omitempty"`
	DelegatedOrganisation *string   `json:"delegatedOrganisation,omitempty"`
	Hosting               Hosting   `json:"hosting"`
	Meta                  *Meta     `json:"meta,omitempty"`
	Oin                   *string   `json:"oin,omitempty"`
	Organisation          *string   `json:"organisation,omitempty"`
	Standard              Standard  `json:"standard"`
	UpdatedAt             time.Time `json:"updatedAt"`
	Uuid                  uuid.UUID `json:"uuid"`
}

// ComplianceCheckRequest defines model for ComplianceCheckRequest.
type ComplianceCheckRequest struct {
	ClusterIdentifier *uuid.UUID `json:"clusterIdentifier,omitempty"`
	Command           *string    `json:"command,omitempty"`
	Compliant         *bool      `json:"compliant,omitempty"`
	Meta              *Meta      `json:"meta,omitempty"`
	Platform          *string    `json:"platform,omitempty"`
	Standard          *int       `json:"standard,omitempty"`
	StandardVersion   *string    `json:"standardVersion,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *float32 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Method  *string  `json:"method,omitempty"`
	Path    *string  `json:"path,omitempty"`
}

// Hosting defines model for Hosting.
type Hosting struct {
	ClusterIdentifier *string `json:"clusterIdentifier,omitempty"`
	Command           *string `json:"command,omitempty"`
	Compliant         *bool   `json:"compliant,omitempty"`
	Platform          *string `json:"platform,omitempty"`
}

// Meta defines model for Meta.
type Meta struct {
	Username *string `json:"username,omitempty"`
}

// Standard defines model for Standard.
type Standard struct {
	Name *string `json:"name,omitempty"`
}

// Token defines model for Token.
type Token struct {
	ExpiresIn *float32 `json:"expiresIn,omitempty"`
	Token     *string  `json:"token,omitempty"`
	TokenType *string  `json:"tokenType,omitempty"`
}

// Validation defines model for Validation.
type Validation struct {
	CertsValid *bool `json:"certsValid,omitempty"`
}

// AuthJSONBody defines parameters for Auth.
type AuthJSONBody = map[string]interface{}

// ValidateJSONBody defines parameters for Validate.
type ValidateJSONBody = map[string]interface{}

// AuthJSONRequestBody defines body for Auth for application/json ContentType.
type AuthJSONRequestBody = AuthJSONBody

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = ComplianceCheckRequest

// ValidateJSONRequestBody defines body for Validate for application/json ContentType.
type ValidateJSONRequestBody = ValidateJSONBody
