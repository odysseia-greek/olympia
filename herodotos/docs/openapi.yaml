openapi: 3.0.1
info:
  title: Herodotos
  description: |-
    # Introduction
    This is a sample Herodotos server which is part of Odysseia.

    # Herodotos in Greek

    Ἡροδότου Ἁλικαρνησσέος ἱστορίης ἀπόδεξις ἥδε, ὡς μήτε τὰ γενόμενα ἐξ ἀνθρώπων τῷ χρόνῳ ἐξίτηλα γένηται, μήτε ἔργα μεγάλα τε καὶ θωμαστά, τὰ μὲν Ἕλλησι τὰ δὲ βαρβάροισι ἀποδεχθέντα, ἀκλεᾶ γένηται, τά τε ἄλλα καὶ δι᾽ ἣν αἰτίην ἐπολέμησαν ἀλλήλοισι.

    # Herodotos in English

    This is the display of the inquiry of Herodotus of Halicarnassus, so that things done by man not be forgotten in time, and that great and marvelous deeds, some displayed by the Hellenes, some by the barbarians, not lose their glory, including among others what was the cause of their waging war on each other.

    # Note on text

    [Text can be found here](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3atext%3a1999.01.0125)
  termsOfService: There are no TOS at this moment, use at your own risk we take no responsibility
  contact:
    url: https://github.com/odysseia-greek
    email: joerivrijaldenhoven@odysseia.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 0.2.4
servers:
  - url: http://k3s-odysseia.greek/herodotos/v1
  - url: https://k3s-odysseia.greek/herodotos/v1
paths:
  /ping:
    get:
      tags:
        - status
      description: Checks if API is reachable
      operationId: ping
      responses:
        200:
          description: Pong response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultModel'
  /health:
    get:
      tags:
        - status
      description: Checks if API is healthy
      operationId: health
      responses:
        200:
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /texts/_create:
    post:
      tags:
        - texts
      description: Creates a new text entry
      operationId: createText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTextRequest'
        required: true
      responses:
        200:
          description: Text created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Text'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        405:
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodError'
  /texts/_analyze:
    post:
      tags:
        - texts
      description: Analyzes the provided text
      operationId: analyzeText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeTextRequest'
        required: true
      responses:
        200:
          description: Text analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeTextResponse'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        405:
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodError'
  /texts/_check:
    post:
      tags:
        - texts
      description: Checks the provided text
      operationId: checkText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckTextRequest'
        required: true
      responses:
        200:
          description: Text checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckTextResponse'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        405:
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodError'
  /texts/options:
    get:
      tags:
        - texts
      description: Gets text options
      operationId: getTextOptions
      responses:
        200:
          description: Text options retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregationResult'
        405:
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodError'
components:
  schemas:
    ResultModel:
      type: object
      properties:
        result:
          type: string
          example: pong
          x-go-name: Result
    Health:
      type: object
      properties:
        healthy:
          type: boolean
          example: true
          x-go-name: Healthy
        time:
          type: string
          example: 2023-06-07 15:02:11.678766777 +0000 UTC m=+5090.268683461
          x-go-name: Time
    Text:
      type: object
      properties:
        author:
          type: string
          example: Herodotos
          x-go-name: Author
        book:
          type: string
          example: Histories
          x-go-name: Book
        type:
          type: string
          example: History
          x-go-name: Type
        reference:
          type: string
          example: 1.1
          x-go-name: Reference
        perseusTextLink:
          type: string
          example: http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3atext%3a1999.01.0125
          x-go-name: PerseusTextLink
        rhemai:
          type: array
          items:
            $ref: '#/components/schemas/Rhema'
    Rhema:
      type: object
      properties:
        greek:
          type: string
          example: ὡς δέ οἱ ταῦτα ἔδοξε, καὶ ἐποίεε κατὰ τάχος·
          x-go-name: Greek
        translations:
          type: array
          items:
            type: string
            example: first translation
            x-go-name: Translations
        section:
          type: string
          example: 1
          x-go-name: Section
    CreateTextRequest:
      type: object
      properties:
        author:
          type: string
          example: Herodotos
          x-go-name: Author
        book:
          type: string
          example: Histories
          x-go-name: Book
        reference:
          type: string
          example: 1.1
          x-go-name: Reference
        section:
          type: string
          example: a
          x-go-name: Section
    AnalyzeTextRequest:
      type: object
      properties:
        rootword:
          type: string
          example: Ἀθηναῖος
          x-go-name: Rootword
    CheckTextRequest:
      type: object
      properties:
        author:
          type: string
          example: Herodotos
          x-go-name: Author
        book:
          type: string
          example: Histories
          x-go-name: Book
        reference:
          type: string
          example: 1.1
          x-go-name: Reference
        translations:
          type: array
          items:
            $ref: '#/components/schemas/Translations'
          x-go-name: Translations
    Translations:
      type: object
      properties:
        section:
          type: string
          example: a
          x-go-name: Section
        translation:
          type: string
          example: this is an example sentence
          x-go-name: Translation
    AnalyzeTextResponse:
      type: object
      properties:
        rootword:
          type: string
          example: Ἀθηναῖος
          x-go-name: Rootword
        conjugations:
          type: array
          items:
            type: string
            example: Ἀθηναῖος
            x-go-name: Conjugations
        results:
          type: array
          items:
            $ref: '#/components/schemas/AnalyzeResult'
          x-go-name: Results
    AnalyzeResult:
      type: object
      properties:
        referenceLink:
          type: string
          example: text/author=herodotos&book=histories&reference=1.1
          x-go-name: ReferenceLink
        author:
          type: string
          example: Herodotos
          x-go-name: Author
        book:
          type: string
          example: Histories
          x-go-name: Book
        reference:
          type: string
          example: 1.1
          x-go-name: Reference
        text:
          $ref: '#/components/schemas/Rhema'
    CheckTextResponse:
      type: object
      properties:
        averageLevenshteinPercentage:
          type: string
          example: "9.09"
          x-go-name: AverageLevenshteinPercentage
        sections:
          type: array
          items:
            $ref: '#/components/schemas/AnswerSection'
          x-go-name: Sections
        possibleTypos:
          type: array
          items:
            $ref: '#/components/schemas/Typo'
          x-go-name: PossibleTypos
    AnswerSection:
      type: object
      properties:
        section:
          type: string
          example: a
          x-go-name: Section
        levenshteinPercentage:
          type: string
          example: "9.09"
          x-go-name: LevenshteinPercentage
        quizSentence:
          type: string
          example: Such a step would not be condemned either by the gods who received our oaths,
          x-go-name: QuizSentence
        answerSentence:
          type: string
          example: this is an example answer
          x-go-name: AnswerSentence
    Typo:
      type: object
      properties:
        source:
          type: string
          example: correct
          x-go-name: Source
        provided:
          type: string
          example: incorret
          x-go-name: Provided
    AggregationResult:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/ESAuthor'
          x-go-name: Authors
    ESAuthor:
      type: object
      properties:
        key:
          type: string
          example: Herodotos
          x-go-name: Key
        books:
          type: array
          items:
            $ref: '#/components/schemas/ESBook'
          x-go-name: Books
    ESBook:
      type: object
      properties:
        key:
          type: string
          example: Histories
          x-go-name: Key
        references:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
          x-go-name: References
    Reference:
      type: object
      properties:
        key:
          type: string
          example: 1.1
          x-go-name: Key
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
          x-go-name: Sections
    Section:
      type: object
      properties:
        key:
          type: string
          example: 1
          x-go-name: Key
    ValidationError:
      type: object
      properties:
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
        errorModel:
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessages'
    ValidationMessages:
      type: object
      properties:
        validationField:
          type: string
          example: word
          x-go-name: Field
        validationMessage:
          type: string
          example: cannot be empty
          x-go-name: Message
    MethodError:
      type: object
      properties:
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
        errorModel:
          type: array
          items:
            $ref: '#/components/schemas/MethodMessages'
    MethodMessages:
      type: object
      properties:
        allowedMethods:
          type: string
          example: GET
          x-go-name: Methods
        methodError:
          type: string
          example: Method DELETE not allowed at this endpoint
          x-go-name: Message
