openapi: 3.0.1
info:
  title: Alexandros
  description: |-
    # Introduction
    This API is documented in **OpenAPI format** and is using [ReDoc](https://github.com/Redocly/redoc)

    ### Ploutarchos, in regards to Alexander, in Greek

    Ἀλέξανδρος ὅτι τῷ γένει πρὸς πατρὸς μὲν ἦν Ἡρακλείδης ἀπὸ Καράνου, πρὸς δὲ μητρὸς Αἰακίδης ἀπὸ Νεοπτολέμου, τῶν πάνυ πεπιστευμένων ἐστί. λέγεται δέ Φίλιππος ἐν [p. 226] θρᾴκῃ τῇ Ὀλυμπιάδι συμμυηθείς αὐτός τε μειράκιον ὢν ἔτι κἀκείνης παιδὸς ὀρφανῆς γονέων ἐρασθῆναι καὶ τὸν γάμον οὕτως ἁρμόσαι, πείσας τὸν ἀδελφὸν αὐτῆς Ἀρύμβαν.

    ### Ploutarchos, in regards to Alexander, in English

    As for the lineage of Alexander, on his father's side he was a descendant of Heracles through Caranus, and on his mother's side a descendant of Aeacus through Neoptolemus; this is accepted without any question. And we are told that Philip, after being initiated into the mysteries of Samothrace at the same time with Olympias, he himself being still a youth and she an orphan child, fell in love with her and betrothed himself to her at once with the consent of her brother, Arymbas.
    # Note on text

    [Text can be found here](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A2008.01.0129%3Achapter%3D2%3Asection%3D1)
  termsOfService: "there are no TOS at this moment, use at your own risk we take no\
    \ responsibility"
  contact:
    url: https://github.com/odysseia-greek
    email: joerivrijaldenhoven@odysseia.io
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 0.2.4
servers:
  - url: http://k3s-odysseia.greek/alexandros/v1
  - url: https://k3s-odysseia.greek/alexandros/v1
paths:
  /health:
    get:
      tags:
        - status
      description: Checks if api is healthy
      operationId: health
      responses:
        "200":
          description: Health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        "502":
          description: Health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /ping:
    get:
      tags:
        - status
      summary: Checks the reachability of the API.
      description: This endpoint returns a "pong" response to indicate that the API
        is reachable.
      operationId: ping
      responses:
        "200":
          description: ResultModel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultModel'
  /search:
    get:
      tags:
        - search
      description: Searches the dictionary for a word in Greek (English wip)
      operationId: search
      parameters:
        - name: word
          in: query
          description: word or part of word being queried
          required: true
          schema:
            type: string
            format: word
        - name: mode
          in: query
          description: "Determines a number of query modes; fuzzy, exact or phrase"
          schema:
            type: string
            format: mode
        - name: lang
          in: query
          description: "language to use (greek, english, dutch)"
          schema:
            type: string
            format: lang
        - name: searchWord
          in: query
          description: search the word if found in texts. This slows down operations
            so not recommended in fuzzy or partial modes
          schema:
            type: boolean
            format: searchWord
      responses:
        "200":
          description: ExtendedResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedResponse'
        "400":
          description: ValidationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        "404":
          description: NotFoundError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "405":
          description: MethodError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MethodError'
        "502":
          description: ElasticSearchError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticSearchError'
components:
  schemas:
    DatabaseHealth:
      type: object
      properties:
        clusterName:
          type: string
          example: aristoteles
          x-go-name: ClusterName
        healthy:
          type: boolean
          example: true
          x-go-name: Healthy
        serverName:
          type: string
          example: aristoteles-es-worker-0
          x-go-name: ServerName
        serverVersion:
          type: string
          example: 8.8.0
          x-go-name: ServerVersion
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ElasticErrorMessage:
      type: object
      properties:
        elasticError:
          type: string
          x-go-name: ElasticError
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ElasticSearchError:
      required:
        - uniqueCode
      type: object
      properties:
        errorModel:
          $ref: '#/components/schemas/ElasticErrorMessage'
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ErrorModel:
      required:
        - uniqueCode
      type: object
      properties:
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
      x-go-package: github.com/odysseia-greek/agora/plato/models
    Health:
      type: object
      properties:
        databaseHealth:
          $ref: '#/components/schemas/DatabaseHealth'
        healthy:
          type: boolean
          example: true
          x-go-name: Healthy
        memory:
          $ref: '#/components/schemas/Memory'
        time:
          type: string
          example: 2023-06-07 15:02:11.678766777 +0000 UTC m=+5090.268683461
          x-go-name: Time
      x-go-package: github.com/odysseia-greek/agora/plato/models
    Memory:
      type: object
      properties:
        alloc:
          type: integer
          format: uint64
          x-go-name: Alloc
        free:
          type: integer
          format: uint64
          x-go-name: Free
        sys:
          type: integer
          format: uint64
          x-go-name: Sys
        totalAlloc:
          type: integer
          format: uint64
          x-go-name: TotalAlloc
        unit:
          type: string
          x-go-name: Unit
      x-go-package: github.com/odysseia-greek/agora/plato/models
    MethodError:
      required:
        - uniqueCode
      type: object
      properties:
        errorModel:
          type: array
          items:
            $ref: '#/components/schemas/MethodMessages'
          x-go-name: Messages
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
      x-go-package: github.com/odysseia-greek/agora/plato/models

    ExtendedResponse:
      type: object
      properties:
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Hit'
      example:
        hits:
          - hit:
              greek: "λόγος –ου, ὁ"
              english: "word"
            foundInText:
              rhemai:
                - author: "Matthew New Testament"
                  greek: "ἐκ γὰρ τῶν λόγων σου δικαιωθήσῃ, καὶ ἐκ τῶν λόγων σου καταδικασθήσῃ."
                  translations:
                    - "For by your words you will be justified, and by your words you will be condemned."
                  book: 2
                  chapter: 12
                  section: 37
                  perseusTextLink: "https://scaife.perseus.org/reader/urn:cts:greekLit:tlg0031.tlg001.perseus-grc2:12.37/"

    Hit:
      type: object
      properties:
        hit:
          $ref: '#/components/schemas/Meros'
        foundInText:
          $ref: '#/components/schemas/FoundInText'
      example:
        hit: {}
        foundInText: {}

    Meros:
      type: object
      properties:
        greek:
          type: string
        english:
          type: string
      example:
        greek: "λόγος"
        english: "word"

    FoundInText:
      type: object
      properties:
        rhemai:
          type: array
          items:
            $ref: '#/components/schemas/TextInstance'
      example:
        rhemai: []

    TextInstance:
      type: object
      properties:
        author:
          type: string
        greek:
          type: string
        translations:
          type: array
          items:
            type: string
        book:
          type: integer
        chapter:
          type: integer
        section:
          type: integer
        perseusTextLink:
          type: string
      example:
        author: "Plato"
        greek: "ἐκ γὰρ τῶν λόγων σου δικαιωθήσῃ"
        translations:
          - "For by your words you will be justified"
        book: 1
        chapter: 1
        section: 1
        perseusTextLink: "https://example.com"

    MethodMessages:
      type: object
      properties:
        allowedMethods:
          type: string
          example: GET
          x-go-name: Methods
        methodError:
          type: string
          example: Method DELETE not allowed at this endpoint
          x-go-name: Message
      description: MethodMessages messages used in method error
      x-go-package: github.com/odysseia-greek/agora/plato/models
    NotFoundError:
      required:
        - uniqueCode
      type: object
      properties:
        errorModel:
          $ref: '#/components/schemas/NotFoundMessage'
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
      x-go-package: github.com/odysseia-greek/agora/plato/models
    NotFoundMessage:
      type: object
      properties:
        reason:
          type: string
          example: produced 0 results
          x-go-name: Reason
        type:
          type: string
          example: query for obscura
          x-go-name: Type
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ResultModel:
      required:
        - result
      type: object
      properties:
        result:
          type: string
          example: pong
          x-go-name: Result
      x-go-package: github.com/odysseia-greek/agora/plato/models
    Rhema:
      type: object
      properties:
        rhemai:
          type: array
          items:
            $ref: '#/components/schemas/RhemaSource'
          x-go-name: Rhemai
      x-go-package: github.com/odysseia-greek/agora/plato/models
    RhemaSource:
      required:
        - author
        - book
        - chapter
        - greek
        - perseusTextLink
        - section
        - translations
      type: object
      properties:
        author:
          type: string
          example: Herodotos
          x-go-name: Author
        book:
          type: integer
          format: int64
          example: 1
          x-go-name: Book
        chapter:
          type: integer
          format: int64
          example: 1
          x-go-name: Chapter
        greek:
          type: string
          example: "ὡς δέ οἱ ταῦτα ἔδοξε, καὶ ἐποίεε κατὰ τάχος·"
          x-go-name: Greek
        perseusTextLink:
          type: string
          example: https://externallink
          x-go-name: PerseusTextLink
        section:
          type: integer
          format: int64
          example: 1
          x-go-name: Section
        translations:
          type: array
          example:
            - first translation
            - second translation
          items:
            type: string
          x-go-name: Translations
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ValidationError:
      required:
        - uniqueCode
      type: object
      properties:
        errorModel:
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessages'
          x-go-name: Messages
        uniqueCode:
          type: string
          example: 94374b4f-3dda-4ffb-b33b-2cb6ba092b84
          x-go-name: UniqueCode
      x-go-package: github.com/odysseia-greek/agora/plato/models
    ValidationMessages:
      type: object
      properties:
        validationField:
          type: string
          example: word
          x-go-name: Field
        validationMessage:
          type: string
          example: cannot be empty
          x-go-name: Message
      x-go-package: github.com/odysseia-greek/agora/plato/models
x-original-swagger-version: "2.0"
