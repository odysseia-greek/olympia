// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type AggregateResult struct {
	Themes []*Themes `json:"themes,omitempty"`
}

type AggregationResult struct {
	Authors []*ESAuthor `json:"authors,omitempty"`
}

type AnalyzeResult struct {
	Author        *string `json:"author,omitempty"`
	Book          *string `json:"book,omitempty"`
	Reference     *string `json:"reference,omitempty"`
	ReferenceLink *string `json:"referenceLink,omitempty"`
	Text          *Rhema  `json:"text,omitempty"`
}

type AnalyzeTextResponse struct {
	Conjugations []*ConjugationResponse `json:"conjugations,omitempty"`
	Texts        []*AnalyzeResult       `json:"texts,omitempty"`
	Rootword     *string                `json:"rootword,omitempty"`
}

type AnswerSection struct {
	AnswerSentence        *string `json:"answerSentence,omitempty"`
	LevenshteinPercentage *string `json:"levenshteinPercentage,omitempty"`
	QuizSentence          *string `json:"quizSentence,omitempty"`
	Section               *string `json:"section,omitempty"`
}

type AuthorBasedAnswerInput struct {
	Theme    *string `json:"theme,omitempty"`
	Set      *string `json:"set,omitempty"`
	Segment  *string `json:"segment,omitempty"`
	QuizWord *string `json:"quizWord,omitempty"`
	Answer   *string `json:"answer,omitempty"`
}

type AuthorBasedAnswerResponse struct {
	Correct     *bool     `json:"correct,omitempty"`
	QuizWord    *string   `json:"quizWord,omitempty"`
	WordsInText []*string `json:"wordsInText,omitempty"`
}

type AuthorBasedInput struct {
	ExcludeWords []*string `json:"excludeWords,omitempty"`
	Theme        *string   `json:"theme,omitempty"`
	Set          *string   `json:"set,omitempty"`
	Segment      *string   `json:"segment,omitempty"`
}

type AuthorBasedOptions struct {
	QuizWord *string `json:"quizWord,omitempty"`
}

type AuthorBasedQuiz struct {
	QuizItem      *string               `json:"quizItem,omitempty"`
	NumberOfItems *int32                `json:"numberOfItems,omitempty"`
	Options       []*AuthorBasedOptions `json:"options,omitempty"`
}

type AuthorBasedResponse struct {
	FullSentence *string             `json:"fullSentence,omitempty"`
	Translation  *string             `json:"translation,omitempty"`
	Reference    *string             `json:"reference,omitempty"`
	Quiz         *AuthorBasedQuiz    `json:"quiz,omitempty"`
	GrammarQuiz  []*GrammarQuizAdded `json:"grammarQuiz,omitempty"`
}

type CheckTextRequestInput struct {
	Translations []*TranslationsInput `json:"translations,omitempty"`
	Author       *string              `json:"author,omitempty"`
	Book         *string              `json:"book,omitempty"`
	Reference    *string              `json:"reference,omitempty"`
}

type CheckTextResponse struct {
	AverageLevenshteinPercentage *string          `json:"averageLevenshteinPercentage,omitempty"`
	PossibleTypos                []*Typo          `json:"possibleTypos,omitempty"`
	Sections                     []*AnswerSection `json:"sections,omitempty"`
}

type ComprehensiveResponse struct {
	Correct      *bool                `json:"correct,omitempty"`
	FoundInText  *AnalyzeTextResponse `json:"foundInText,omitempty"`
	QuizWord     *string              `json:"quizWord,omitempty"`
	SimilarWords []*Hit               `json:"similarWords,omitempty"`
}

type ConjugationResponse struct {
	Rule *string `json:"rule,omitempty"`
	Word *string `json:"word,omitempty"`
}

type CreateTextInput struct {
	Author    *string `json:"author,omitempty"`
	Book      *string `json:"book,omitempty"`
	Reference *string `json:"reference,omitempty"`
	Section   *string `json:"section,omitempty"`
}

type Database struct {
	ClusterName   *string `json:"clusterName,omitempty"`
	Healthy       *bool   `json:"healthy,omitempty"`
	ServerName    *string `json:"serverName,omitempty"`
	ServerVersion *string `json:"serverVersion,omitempty"`
}

type DeclensionTranslationResult struct {
	Results []*Result `json:"results,omitempty"`
}

type Dialogue struct {
	Introduction  *string    `json:"introduction,omitempty"`
	Speakers      []*Speaker `json:"speakers,omitempty"`
	Section       *string    `json:"section,omitempty"`
	LinkToPerseus *string    `json:"linkToPerseus,omitempty"`
}

type DialogueAnswer struct {
	Percentage    *float64              `json:"percentage,omitempty"`
	Input         []*DialogueContent    `json:"input,omitempty"`
	Answer        []*DialogueContent    `json:"answer,omitempty"`
	WronglyPlaced []*DialogueCorrection `json:"wronglyPlaced,omitempty"`
}

type DialogueAnswerInput struct {
	Theme   *string                 `json:"theme,omitempty"`
	Set     *string                 `json:"set,omitempty"`
	Content []*DialogueInputContent `json:"content,omitempty"`
}

type DialogueContent struct {
	Translation *string `json:"translation,omitempty"`
	Greek       *string `json:"greek,omitempty"`
	Place       *int32  `json:"place,omitempty"`
	Speaker     *string `json:"speaker,omitempty"`
}

type DialogueCorrection struct {
	Translation  *string `json:"translation,omitempty"`
	Greek        *string `json:"greek,omitempty"`
	Place        *int32  `json:"place,omitempty"`
	Speaker      *string `json:"speaker,omitempty"`
	CorrectPlace *int32  `json:"correctPlace,omitempty"`
}

type DialogueInputContent struct {
	Translation *string `json:"translation,omitempty"`
	Greek       *string `json:"greek,omitempty"`
	Place       *int32  `json:"place,omitempty"`
	Speaker     *string `json:"speaker,omitempty"`
}

type DialogueQuizInput struct {
	Theme *string `json:"theme,omitempty"`
	Set   *string `json:"set,omitempty"`
}

type DialogueQuizResponse struct {
	QuizMetadata *QuizMetadata      `json:"quizMetadata,omitempty"`
	Theme        *string            `json:"theme,omitempty"`
	Set          *string            `json:"set,omitempty"`
	Segment      *string            `json:"segment,omitempty"`
	Reference    *string            `json:"reference,omitempty"`
	Dialogue     *Dialogue          `json:"dialogue,omitempty"`
	Content      []*DialogueContent `json:"content,omitempty"`
}

type ESAuthor struct {
	Books []*ESBook `json:"books,omitempty"`
	Key   *string   `json:"key,omitempty"`
}

type ESBook struct {
	Key        *string      `json:"key,omitempty"`
	References []*Reference `json:"references,omitempty"`
}

type ExtendedDictionary struct {
	Hits []*ExtendedDictionaryEntry `json:"hits,omitempty"`
}

type ExtendedDictionaryEntry struct {
	FoundInText *AnalyzeTextResponse `json:"foundInText,omitempty"`
	Hit         *Hit                 `json:"hit,omitempty"`
}

type GrammarQuizAdded struct {
	CorrectAnswer    *string               `json:"correctAnswer,omitempty"`
	WordInText       *string               `json:"wordInText,omitempty"`
	ExtraInformation *string               `json:"extraInformation,omitempty"`
	Options          []*AuthorBasedOptions `json:"options,omitempty"`
}

type Health struct {
	Database *Database `json:"database,omitempty"`
	Healthy  *bool     `json:"healthy,omitempty"`
	Time     *string   `json:"time,omitempty"`
}

type Hit struct {
	Dutch      *string `json:"dutch,omitempty"`
	English    *string `json:"english,omitempty"`
	Greek      *string `json:"greek,omitempty"`
	LinkedWord *string `json:"linkedWord,omitempty"`
	Original   *string `json:"original,omitempty"`
}

type MediaAnswerInput struct {
	Theme         *string `json:"theme,omitempty"`
	Set           *string `json:"set,omitempty"`
	Segment       *string `json:"segment,omitempty"`
	QuizWord      *string `json:"quizWord,omitempty"`
	Answer        *string `json:"answer,omitempty"`
	Comprehensive *bool   `json:"comprehensive,omitempty"`
}

type MediaOptions struct {
	AudioURL *string `json:"audioUrl,omitempty"`
	ImageURL *string `json:"imageUrl,omitempty"`
	Option   *string `json:"option,omitempty"`
}

type MediaQuizInput struct {
	ExcludeWords []*string `json:"excludeWords,omitempty"`
	Theme        *string   `json:"theme,omitempty"`
	Set          *string   `json:"set,omitempty"`
	Segment      *string   `json:"segment,omitempty"`
	Order        *string   `json:"order,omitempty"`
}

type MediaQuizResponse struct {
	NumberOfItems *int32          `json:"numberOfItems,omitempty"`
	Options       []*MediaOptions `json:"options,omitempty"`
	QuizItem      *string         `json:"quizItem,omitempty"`
}

type MultipleChoiceAnswerInput struct {
	Theme         *string `json:"theme,omitempty"`
	Set           *string `json:"set,omitempty"`
	QuizWord      *string `json:"quizWord,omitempty"`
	Answer        *string `json:"answer,omitempty"`
	Comprehensive *bool   `json:"comprehensive,omitempty"`
}

type MultipleChoiceResponse struct {
	NumberOfItems *int32     `json:"numberOfItems,omitempty"`
	Options       []*Options `json:"options,omitempty"`
	QuizItem      *string    `json:"quizItem,omitempty"`
}

type MultipleQuizInput struct {
	ExcludeWords []*string `json:"excludeWords,omitempty"`
	Theme        *string   `json:"theme,omitempty"`
	Set          *string   `json:"set,omitempty"`
	Order        *string   `json:"order,omitempty"`
}

type Options struct {
	Option *string `json:"option,omitempty"`
}

type Query struct {
}

type QuizMetadata struct {
	Language *string `json:"language,omitempty"`
}

type Reference struct {
	Key      *string    `json:"key,omitempty"`
	Sections []*Section `json:"sections,omitempty"`
}

type Result struct {
	RootWord     *string   `json:"rootWord,omitempty"`
	Rule         *string   `json:"rule,omitempty"`
	Translations []*string `json:"translations,omitempty"`
	Word         *string   `json:"word,omitempty"`
}

type Rhema struct {
	Greek        *string   `json:"greek,omitempty"`
	Section      *string   `json:"section,omitempty"`
	Translations []*string `json:"translations,omitempty"`
}

type Section struct {
	Key *string `json:"key,omitempty"`
}

type Segments struct {
	MaxSet *int32  `json:"maxSet,omitempty"`
	Name   *string `json:"name,omitempty"`
}

type Speaker struct {
	Name        *string `json:"name,omitempty"`
	Shorthand   *string `json:"shorthand,omitempty"`
	Translation *string `json:"translation,omitempty"`
}

// The way to check whether backend apis are available
type Status struct {
	Alexandros    *Health `json:"alexandros,omitempty"`
	Dionysios     *Health `json:"dionysios,omitempty"`
	Herodotos     *Health `json:"herodotos,omitempty"`
	OverallHealth *bool   `json:"overallHealth,omitempty"`
}

type Text struct {
	Author          *string  `json:"author,omitempty"`
	Book            *string  `json:"book,omitempty"`
	PerseusTextLink *string  `json:"perseusTextLink,omitempty"`
	Reference       *string  `json:"reference,omitempty"`
	Rhemai          []*Rhema `json:"rhemai,omitempty"`
	Type            *string  `json:"type,omitempty"`
}

type Themes struct {
	Name     *string     `json:"name,omitempty"`
	Segments []*Segments `json:"segments,omitempty"`
}

type TranslationsInput struct {
	Section     *string `json:"section,omitempty"`
	Translation *string `json:"translation,omitempty"`
}

type Typo struct {
	Provided *string `json:"provided,omitempty"`
	Source   *string `json:"source,omitempty"`
}
