package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/json"
	"log"

	"github.com/odysseia-greek/olympia/homeros/graph/model"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.AggregatedHealthResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Health *model.AggregatedHealthResponse `json:"health"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Health, nil
}

// MediaOptions is the resolver for the mediaOptions field.
func (r *queryResolver) MediaOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.AggregatedOptions `json:"mediaOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// MultipleChoiceOptions is the resolver for the multipleChoiceOptions field.
func (r *queryResolver) MultipleChoiceOptions(ctx context.Context) (*model.ThemedOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.ThemedOptions `json:"multipleChoiceOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// AuthorBasedOptions is the resolver for the authorBasedOptions field.
func (r *queryResolver) AuthorBasedOptions(ctx context.Context) (*model.AggregatedOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.AggregatedOptions `json:"authorBasedOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// DialogueOptions is the resolver for the dialogueOptions field.
func (r *queryResolver) DialogueOptions(ctx context.Context) (*model.ThemedOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.ThemedOptions `json:"dialogueOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// GrammarOptions is the resolver for the grammarOptions field.
func (r *queryResolver) GrammarOptions(ctx context.Context) (*model.GrammarOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.GrammarOptions `json:"grammarOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// JourneyOptions is the resolver for the journeyOptions field.
func (r *queryResolver) JourneyOptions(ctx context.Context) (*model.JourneyOptions, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Options *model.JourneyOptions `json:"journeyOptions"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Options, nil
}

// MediaAnswer is the resolver for the mediaAnswer field.
func (r *queryResolver) MediaAnswer(ctx context.Context, input *model.MediaAnswerInput) (*model.ComprehensiveResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.ComprehensiveResponse `json:"mediaAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// MediaQuiz is the resolver for the mediaQuiz field.
func (r *queryResolver) MediaQuiz(ctx context.Context, input *model.MediaQuizInput) (*model.MediaQuizResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.MediaQuizResponse `json:"mediaQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// MultipleChoiceAnswer is the resolver for the multipleChoiceAnswer field.
func (r *queryResolver) MultipleChoiceAnswer(ctx context.Context, input *model.MultipleChoiceAnswerInput) (*model.ComprehensiveResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.ComprehensiveResponse `json:"multipleChoiceAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// MultipleChoiceQuiz is the resolver for the multipleChoiceQuiz field.
func (r *queryResolver) MultipleChoiceQuiz(ctx context.Context, input *model.MultipleQuizInput) (*model.MultipleChoiceResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.MultipleChoiceResponse `json:"multipleChoiceQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// AuthorBasedAnswer is the resolver for the authorBasedAnswer field.
func (r *queryResolver) AuthorBasedAnswer(ctx context.Context, input *model.AuthorBasedAnswerInput) (*model.AuthorBasedAnswerResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.AuthorBasedAnswerResponse `json:"authorBasedAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// AuthorBasedQuiz is the resolver for the authorBasedQuiz field.
func (r *queryResolver) AuthorBasedQuiz(ctx context.Context, input *model.AuthorBasedInput) (*model.AuthorBasedResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.AuthorBasedResponse `json:"authorBasedQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// AuthorBasedWordForms is the resolver for the authorBasedWordForms field.
func (r *queryResolver) AuthorBasedWordForms(ctx context.Context, input *model.AuthorBasedWordFormsInput) (*model.AuthorBasedWordFormsResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Forms *model.AuthorBasedWordFormsResponse `json:"authorBasedWordForms"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Forms, nil
}

// DialogueAnswer is the resolver for the dialogueAnswer field.
func (r *queryResolver) DialogueAnswer(ctx context.Context, input *model.DialogueAnswerInput) (*model.DialogueAnswer, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.DialogueAnswer `json:"dialogueAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// DialogueQuiz is the resolver for the dialogueQuiz field.
func (r *queryResolver) DialogueQuiz(ctx context.Context, input *model.DialogueQuizInput) (*model.DialogueQuizResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.DialogueQuizResponse `json:"dialogueQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// GrammarQuiz is the resolver for the grammarQuiz field.
func (r *queryResolver) GrammarQuiz(ctx context.Context, input *model.GrammarQuizInput) (*model.GrammarQuizResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.GrammarQuizResponse `json:"grammarQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// GrammarAnswer is the resolver for the grammarAnswer field.
func (r *queryResolver) GrammarAnswer(ctx context.Context, input *model.GrammarAnswerInput) (*model.GrammarAnswer, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.GrammarAnswer `json:"grammarAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// JourneyQuiz is the resolver for the journeyQuiz field.
func (r *queryResolver) JourneyQuiz(ctx context.Context, input *model.JourneyQuizInput) (*model.JourneySegmentQuiz, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var raw struct {
		Data struct {
			Section RawJourneySegmentQuiz `json:"journeyQuiz"`
		} `json:"data"`
	}

	if err := json.Unmarshal(data, &raw); err != nil {
		return nil, err
	}

	var quizSections []model.QuizSection

	for _, rawItem := range raw.Data.Section.Quiz {

		type quizProbe struct {
			Typename string `json:"__typename"`
		}

		var probe quizProbe
		if err := json.Unmarshal(rawItem, &probe); err != nil {
			log.Println("Unmarshal probe failed:", err)
			continue
		}

		switch probe.Typename {
		case "StructureQuiz":
			var s model.StructureQuiz
			if err := json.Unmarshal(rawItem, &s); err == nil {
				quizSections = append(quizSections, &s)
			}
		case "MatchQuiz":
			var m model.MatchQuiz
			if err := json.Unmarshal(rawItem, &m); err == nil {
				quizSections = append(quizSections, &m)
			}
		case "TriviaQuiz":
			var t model.TriviaQuiz
			if err := json.Unmarshal(rawItem, &t); err == nil {
				quizSections = append(quizSections, &t)
			}
		case "MediaQuiz":
			var t model.MediaQuiz
			if err := json.Unmarshal(rawItem, &t); err == nil {
				quizSections = append(quizSections, &t)
			}
		case "FinalTranslationQuiz":
			var t model.FinalTranslationQuiz
			if err := json.Unmarshal(rawItem, &t); err == nil {
				quizSections = append(quizSections, &t)
			}
		default:
			log.Println("Unknown quiz section type:", probe.Typename)
		}
	}

	return &model.JourneySegmentQuiz{
		Theme:       raw.Data.Section.Theme,
		Segment:     raw.Data.Section.Segment,
		Number:      raw.Data.Section.Number,
		Sentence:    raw.Data.Section.Sentence,
		Translation: raw.Data.Section.Translation,
		ContextNote: raw.Data.Section.ContextNote,
		Intro:       raw.Data.Section.Intro,
		Quiz:        quizSections,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
