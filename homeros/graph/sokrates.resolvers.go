package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"encoding/json"

	"github.com/odysseia-greek/olympia/homeros/graph/model"
)

// MediaAnswer is the resolver for the mediaAnswer field.
func (r *queryResolver) MediaAnswer(ctx context.Context, input *model.MediaAnswerInput) (*model.ComprehensiveResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.ComprehensiveResponse `json:"mediaAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// MediaQuiz is the resolver for the mediaQuiz field.
func (r *queryResolver) MediaQuiz(ctx context.Context, input *model.MediaQuizInput) (*model.MediaQuizResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.MediaQuizResponse `json:"mediaQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// MultipleChoiceAnswer is the resolver for the multipleChoiceAnswer field.
func (r *queryResolver) MultipleChoiceAnswer(ctx context.Context, input *model.MultipleChoiceAnswerInput) (*model.ComprehensiveResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.ComprehensiveResponse `json:"multipleChoiceAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// MultipleChoiceQuiz is the resolver for the multipleChoiceQuiz field.
func (r *queryResolver) MultipleChoiceQuiz(ctx context.Context, input *model.MultipleQuizInput) (*model.MultipleChoiceResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.MultipleChoiceResponse `json:"multipleChoiceQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// AuthorBasedAnswer is the resolver for the authorBasedAnswer field.
func (r *queryResolver) AuthorBasedAnswer(ctx context.Context, input *model.AuthorBasedAnswerInput) (*model.AuthorBasedAnswerResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.AuthorBasedAnswerResponse `json:"authorBasedAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// AuthorBasedQuiz is the resolver for the authorBasedQuiz field.
func (r *queryResolver) AuthorBasedQuiz(ctx context.Context, input *model.AuthorBasedInput) (*model.AuthorBasedResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.AuthorBasedResponse `json:"authorBasedQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// DialogueAnswer is the resolver for the dialogueAnswer field.
func (r *queryResolver) DialogueAnswer(ctx context.Context, input *model.DialogueAnswerInput) (*model.DialogueAnswer, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Answer *model.DialogueAnswer `json:"dialogueAnswer"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Answer, nil
}

// DialogueQuiz is the resolver for the dialogueQuiz field.
func (r *queryResolver) DialogueQuiz(ctx context.Context, input *model.DialogueQuizInput) (*model.DialogueQuizResponse, error) {
	data, err := r.Handler.ForwardToSokrates(ctx)
	if err != nil {
		return nil, err
	}

	var result struct {
		Data struct {
			Quiz *model.DialogueQuizResponse `json:"dialogueQuiz"`
		} `json:"data"`
	}
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}

	return result.Data.Quiz, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
