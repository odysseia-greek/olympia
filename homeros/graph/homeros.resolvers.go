package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/odysseia-greek/agora/plato/config"
	"github.com/odysseia-greek/agora/plato/models"
	"github.com/odysseia-greek/olympia/homeros/graph/model"
)

// Analyze is the resolver for the analyze field.
func (r *queryResolver) Analyze(ctx context.Context, rootword *string) (*model.AnalyzeTextResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	request := models.AnalyzeTextRequest{Rootword: *rootword}
	jsonBody, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal input to JSON: %v", err)
	}
	return r.Resolver.Handler.Analyze(jsonBody, requestID)
}

// Check is the resolver for the check field.
func (r *queryResolver) Check(ctx context.Context, input *model.CheckTextRequestInput) (*model.CheckTextResponse, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	jsonBody, err := json.Marshal(input)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal input to JSON: %v", err)
	}
	return r.Resolver.Handler.CheckText(jsonBody, requestID)
}

// Create is the resolver for the create field.
func (r *queryResolver) Create(ctx context.Context, input *model.CreateTextInput) (*model.Text, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	jsonBody, err := json.Marshal(input)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal input to JSON: %v", err)
	}
	return r.Resolver.Handler.CreateText(jsonBody, requestID)
}

// Dictionary is the resolver for the dictionary field.
func (r *queryResolver) Dictionary(ctx context.Context, language *string, mode *string, searchInText *bool, word *string) (*model.ExtendedDictionary, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	return r.Resolver.Handler.Dictionary(*word, *language, *mode, requestID, *searchInText)
}

// Grammar is the resolver for the grammar field.
func (r *queryResolver) Grammar(ctx context.Context, word *string) (*model.DeclensionTranslationResult, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	return r.Resolver.Handler.Grammar(*word, requestID)
}

// Status is the resolver for the status field.
func (r *queryResolver) Status(ctx context.Context) (*model.Status, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	return r.Resolver.Handler.Health(requestID)
}

// TextOptions is the resolver for the textOptions field.
func (r *queryResolver) TextOptions(ctx context.Context) (*model.AggregationResult, error) {
	requestID, _ := ctx.Value(config.HeaderKey).(string)
	return r.Resolver.Handler.HerodotosOptions(requestID)
}
