// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/odysseia-greek/olympia/homeros/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AggregateResult struct {
		Themes func(childComplexity int) int
	}

	AggregatedHealthResponse struct {
		Healthy  func(childComplexity int) int
		Services func(childComplexity int) int
		Time     func(childComplexity int) int
		Version  func(childComplexity int) int
	}

	AggregatedOptions struct {
		Themes func(childComplexity int) int
	}

	AggregationResult struct {
		Authors func(childComplexity int) int
	}

	AnalyzeResult struct {
		Author        func(childComplexity int) int
		Book          func(childComplexity int) int
		Reference     func(childComplexity int) int
		ReferenceLink func(childComplexity int) int
		Text          func(childComplexity int) int
	}

	AnalyzeTextResponse struct {
		Conjugations func(childComplexity int) int
		Rootword     func(childComplexity int) int
		Texts        func(childComplexity int) int
	}

	AnswerSection struct {
		AnswerSentence        func(childComplexity int) int
		LevenshteinPercentage func(childComplexity int) int
		QuizSentence          func(childComplexity int) int
		Section               func(childComplexity int) int
	}

	AuthorBasedAnswerResponse struct {
		Correct     func(childComplexity int) int
		Finished    func(childComplexity int) int
		Progress    func(childComplexity int) int
		QuizWord    func(childComplexity int) int
		WordsInText func(childComplexity int) int
	}

	AuthorBasedOptions struct {
		QuizWord func(childComplexity int) int
	}

	AuthorBasedQuiz struct {
		NumberOfItems func(childComplexity int) int
		Options       func(childComplexity int) int
		QuizItem      func(childComplexity int) int
	}

	AuthorBasedResponse struct {
		FullSentence func(childComplexity int) int
		GrammarQuiz  func(childComplexity int) int
		Progress     func(childComplexity int) int
		Quiz         func(childComplexity int) int
		Reference    func(childComplexity int) int
		Translation  func(childComplexity int) int
	}

	AuthorBasedWordForm struct {
		DictionaryForm func(childComplexity int) int
		WordsInText    func(childComplexity int) int
	}

	AuthorBasedWordFormsResponse struct {
		Forms func(childComplexity int) int
	}

	CheckTextResponse struct {
		AverageLevenshteinPercentage func(childComplexity int) int
		PossibleTypos                func(childComplexity int) int
		Sections                     func(childComplexity int) int
	}

	ComprehensiveResponse struct {
		Correct      func(childComplexity int) int
		Finished     func(childComplexity int) int
		FoundInText  func(childComplexity int) int
		Progress     func(childComplexity int) int
		QuizWord     func(childComplexity int) int
		SimilarWords func(childComplexity int) int
	}

	ConjugationResponse struct {
		Rule func(childComplexity int) int
		Word func(childComplexity int) int
	}

	Coordinates struct {
		X func(childComplexity int) int
		Y func(childComplexity int) int
	}

	Database struct {
		ClusterName   func(childComplexity int) int
		Healthy       func(childComplexity int) int
		ServerName    func(childComplexity int) int
		ServerVersion func(childComplexity int) int
	}

	DatabaseInfo struct {
		ClusterName   func(childComplexity int) int
		Healthy       func(childComplexity int) int
		ServerName    func(childComplexity int) int
		ServerVersion func(childComplexity int) int
	}

	DeclensionTranslationResult struct {
		Results func(childComplexity int) int
	}

	Dialogue struct {
		Introduction  func(childComplexity int) int
		LinkToPerseus func(childComplexity int) int
		Section       func(childComplexity int) int
		Speakers      func(childComplexity int) int
	}

	DialogueAnswer struct {
		Answer        func(childComplexity int) int
		Input         func(childComplexity int) int
		Percentage    func(childComplexity int) int
		WronglyPlaced func(childComplexity int) int
	}

	DialogueContent struct {
		Greek       func(childComplexity int) int
		Place       func(childComplexity int) int
		Speaker     func(childComplexity int) int
		Translation func(childComplexity int) int
	}

	DialogueCorrection struct {
		CorrectPlace func(childComplexity int) int
		Greek        func(childComplexity int) int
		Place        func(childComplexity int) int
		Speaker      func(childComplexity int) int
		Translation  func(childComplexity int) int
	}

	DialogueQuizResponse struct {
		Content      func(childComplexity int) int
		Dialogue     func(childComplexity int) int
		QuizMetadata func(childComplexity int) int
		Reference    func(childComplexity int) int
		Segment      func(childComplexity int) int
		Set          func(childComplexity int) int
		Theme        func(childComplexity int) int
	}

	ESAuthor struct {
		Books func(childComplexity int) int
		Key   func(childComplexity int) int
	}

	ESBook struct {
		Key        func(childComplexity int) int
		References func(childComplexity int) int
	}

	ExtendedDictionary struct {
		Hits func(childComplexity int) int
	}

	ExtendedDictionaryEntry struct {
		FoundInText func(childComplexity int) int
		Hit         func(childComplexity int) int
	}

	FinalTranslationQuiz struct {
		Answer      func(childComplexity int) int
		Instruction func(childComplexity int) int
		Options     func(childComplexity int) int
	}

	GrammarAnswer struct {
		Correct      func(childComplexity int) int
		Finished     func(childComplexity int) int
		FoundInText  func(childComplexity int) int
		Progress     func(childComplexity int) int
		QuizWord     func(childComplexity int) int
		SimilarWords func(childComplexity int) int
	}

	GrammarOption struct {
		Option func(childComplexity int) int
	}

	GrammarOptions struct {
		Themes func(childComplexity int) int
	}

	GrammarQuizAdded struct {
		CorrectAnswer    func(childComplexity int) int
		ExtraInformation func(childComplexity int) int
		Options          func(childComplexity int) int
		WordInText       func(childComplexity int) int
	}

	GrammarQuizResponse struct {
		ContractionRule func(childComplexity int) int
		Description     func(childComplexity int) int
		DictionaryForm  func(childComplexity int) int
		Difficulty      func(childComplexity int) int
		NumberOfItems   func(childComplexity int) int
		Options         func(childComplexity int) int
		Progress        func(childComplexity int) int
		QuizItem        func(childComplexity int) int
		Stem            func(childComplexity int) int
		Translation     func(childComplexity int) int
	}

	GrammarSegment struct {
		Difficulty func(childComplexity int) int
		MaxSet     func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	GrammarThemes struct {
		Name     func(childComplexity int) int
		Segments func(childComplexity int) int
	}

	Health struct {
		Database func(childComplexity int) int
		Healthy  func(childComplexity int) int
		Time     func(childComplexity int) int
	}

	Hit struct {
		Dutch      func(childComplexity int) int
		English    func(childComplexity int) int
		Greek      func(childComplexity int) int
		LinkedWord func(childComplexity int) int
		Original   func(childComplexity int) int
	}

	JourneyOptions struct {
		Themes func(childComplexity int) int
	}

	JourneySegment struct {
		Coordinates func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		Number      func(childComplexity int) int
	}

	JourneySegmentQuiz struct {
		ContextNote func(childComplexity int) int
		Intro       func(childComplexity int) int
		Number      func(childComplexity int) int
		Quiz        func(childComplexity int) int
		Segment     func(childComplexity int) int
		Sentence    func(childComplexity int) int
		Theme       func(childComplexity int) int
		Translation func(childComplexity int) int
	}

	JourneyThemes struct {
		Name     func(childComplexity int) int
		Segments func(childComplexity int) int
	}

	MatchQuiz struct {
		Instruction func(childComplexity int) int
		Pairs       func(childComplexity int) int
	}

	MediaOptions struct {
		AudioURL func(childComplexity int) int
		ImageURL func(childComplexity int) int
		Option   func(childComplexity int) int
	}

	MediaPair struct {
		Answer func(childComplexity int) int
		Word   func(childComplexity int) int
	}

	MediaQuiz struct {
		Instruction func(childComplexity int) int
		MediaFiles  func(childComplexity int) int
	}

	MediaQuizResponse struct {
		NumberOfItems func(childComplexity int) int
		Options       func(childComplexity int) int
		Progress      func(childComplexity int) int
		QuizItem      func(childComplexity int) int
	}

	MultipleChoiceResponse struct {
		NumberOfItems func(childComplexity int) int
		Options       func(childComplexity int) int
		Progress      func(childComplexity int) int
		QuizItem      func(childComplexity int) int
	}

	MultipleTheme struct {
		MaxSet func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Options struct {
		Option func(childComplexity int) int
	}

	ProgressEntry struct {
		CorrectCount   func(childComplexity int) int
		Greek          func(childComplexity int) int
		IncorrectCount func(childComplexity int) int
		LastPlayed     func(childComplexity int) int
		PlayCount      func(childComplexity int) int
		Translation    func(childComplexity int) int
	}

	Query struct {
		Analyze               func(childComplexity int, rootword *string) int
		AuthorBasedAnswer     func(childComplexity int, input *model.AuthorBasedAnswerInput) int
		AuthorBasedOptions    func(childComplexity int) int
		AuthorBasedQuiz       func(childComplexity int, input *model.AuthorBasedInput) int
		AuthorBasedWordForms  func(childComplexity int, input *model.AuthorBasedWordFormsInput) int
		Check                 func(childComplexity int, input *model.CheckTextRequestInput) int
		Create                func(childComplexity int, input *model.CreateTextInput) int
		DialogueAnswer        func(childComplexity int, input *model.DialogueAnswerInput) int
		DialogueOptions       func(childComplexity int) int
		DialogueQuiz          func(childComplexity int, input *model.DialogueQuizInput) int
		Dictionary            func(childComplexity int, language *string, mode *string, searchInText *bool, word *string) int
		Grammar               func(childComplexity int, word *string) int
		GrammarAnswer         func(childComplexity int, input *model.GrammarAnswerInput) int
		GrammarOptions        func(childComplexity int) int
		GrammarQuiz           func(childComplexity int, input *model.GrammarQuizInput) int
		Health                func(childComplexity int) int
		JourneyOptions        func(childComplexity int) int
		JourneyQuiz           func(childComplexity int, input *model.JourneyQuizInput) int
		MediaAnswer           func(childComplexity int, input *model.MediaAnswerInput) int
		MediaOptions          func(childComplexity int) int
		MediaQuiz             func(childComplexity int, input *model.MediaQuizInput) int
		MultipleChoiceAnswer  func(childComplexity int, input *model.MultipleChoiceAnswerInput) int
		MultipleChoiceOptions func(childComplexity int) int
		MultipleChoiceQuiz    func(childComplexity int, input *model.MultipleQuizInput) int
		Status                func(childComplexity int) int
		TextOptions           func(childComplexity int) int
	}

	QuizIntro struct {
		Author     func(childComplexity int) int
		Background func(childComplexity int) int
		Work       func(childComplexity int) int
	}

	QuizMetadata struct {
		Language func(childComplexity int) int
	}

	QuizPair struct {
		Answer func(childComplexity int) int
		Greek  func(childComplexity int) int
	}

	Reference struct {
		Key      func(childComplexity int) int
		Sections func(childComplexity int) int
	}

	Result struct {
		RootWord     func(childComplexity int) int
		Rule         func(childComplexity int) int
		Translations func(childComplexity int) int
		Word         func(childComplexity int) int
	}

	Rhema struct {
		Greek        func(childComplexity int) int
		Section      func(childComplexity int) int
		Translations func(childComplexity int) int
	}

	Section struct {
		Key func(childComplexity int) int
	}

	Segment struct {
		MaxSet func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Segments struct {
		MaxSet func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	ServiceHealth struct {
		DatabaseInfo func(childComplexity int) int
		Healthy      func(childComplexity int) int
		Name         func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	Speaker struct {
		Name        func(childComplexity int) int
		Shorthand   func(childComplexity int) int
		Translation func(childComplexity int) int
	}

	Status struct {
		Alexandros    func(childComplexity int) int
		Dionysios     func(childComplexity int) int
		Herodotos     func(childComplexity int) int
		OverallHealth func(childComplexity int) int
	}

	StructureQuiz struct {
		Answer   func(childComplexity int) int
		Note     func(childComplexity int) int
		Options  func(childComplexity int) int
		Question func(childComplexity int) int
		Text     func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	Text struct {
		Author          func(childComplexity int) int
		Book            func(childComplexity int) int
		PerseusTextLink func(childComplexity int) int
		Reference       func(childComplexity int) int
		Rhemai          func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	Theme struct {
		Name     func(childComplexity int) int
		Segments func(childComplexity int) int
	}

	ThemedOptions struct {
		Themes func(childComplexity int) int
	}

	Themes struct {
		Name     func(childComplexity int) int
		Segments func(childComplexity int) int
	}

	TriviaQuiz struct {
		Answer   func(childComplexity int) int
		Note     func(childComplexity int) int
		Options  func(childComplexity int) int
		Question func(childComplexity int) int
	}

	Typo struct {
		Provided func(childComplexity int) int
		Source   func(childComplexity int) int
	}
}

type QueryResolver interface {
	Health(ctx context.Context) (*model.AggregatedHealthResponse, error)
	MediaOptions(ctx context.Context) (*model.AggregatedOptions, error)
	MultipleChoiceOptions(ctx context.Context) (*model.ThemedOptions, error)
	AuthorBasedOptions(ctx context.Context) (*model.AggregatedOptions, error)
	DialogueOptions(ctx context.Context) (*model.ThemedOptions, error)
	GrammarOptions(ctx context.Context) (*model.GrammarOptions, error)
	JourneyOptions(ctx context.Context) (*model.JourneyOptions, error)
	MediaAnswer(ctx context.Context, input *model.MediaAnswerInput) (*model.ComprehensiveResponse, error)
	MediaQuiz(ctx context.Context, input *model.MediaQuizInput) (*model.MediaQuizResponse, error)
	MultipleChoiceAnswer(ctx context.Context, input *model.MultipleChoiceAnswerInput) (*model.ComprehensiveResponse, error)
	MultipleChoiceQuiz(ctx context.Context, input *model.MultipleQuizInput) (*model.MultipleChoiceResponse, error)
	AuthorBasedAnswer(ctx context.Context, input *model.AuthorBasedAnswerInput) (*model.AuthorBasedAnswerResponse, error)
	AuthorBasedQuiz(ctx context.Context, input *model.AuthorBasedInput) (*model.AuthorBasedResponse, error)
	AuthorBasedWordForms(ctx context.Context, input *model.AuthorBasedWordFormsInput) (*model.AuthorBasedWordFormsResponse, error)
	DialogueAnswer(ctx context.Context, input *model.DialogueAnswerInput) (*model.DialogueAnswer, error)
	DialogueQuiz(ctx context.Context, input *model.DialogueQuizInput) (*model.DialogueQuizResponse, error)
	GrammarQuiz(ctx context.Context, input *model.GrammarQuizInput) (*model.GrammarQuizResponse, error)
	GrammarAnswer(ctx context.Context, input *model.GrammarAnswerInput) (*model.GrammarAnswer, error)
	JourneyQuiz(ctx context.Context, input *model.JourneyQuizInput) (*model.JourneySegmentQuiz, error)
	Analyze(ctx context.Context, rootword *string) (*model.AnalyzeTextResponse, error)
	Check(ctx context.Context, input *model.CheckTextRequestInput) (*model.CheckTextResponse, error)
	Create(ctx context.Context, input *model.CreateTextInput) (*model.Text, error)
	Dictionary(ctx context.Context, language *string, mode *string, searchInText *bool, word *string) (*model.ExtendedDictionary, error)
	Grammar(ctx context.Context, word *string) (*model.DeclensionTranslationResult, error)
	Status(ctx context.Context) (*model.Status, error)
	TextOptions(ctx context.Context) (*model.AggregationResult, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AggregateResult.themes":
		if e.complexity.AggregateResult.Themes == nil {
			break
		}

		return e.complexity.AggregateResult.Themes(childComplexity), true

	case "AggregatedHealthResponse.healthy":
		if e.complexity.AggregatedHealthResponse.Healthy == nil {
			break
		}

		return e.complexity.AggregatedHealthResponse.Healthy(childComplexity), true

	case "AggregatedHealthResponse.services":
		if e.complexity.AggregatedHealthResponse.Services == nil {
			break
		}

		return e.complexity.AggregatedHealthResponse.Services(childComplexity), true

	case "AggregatedHealthResponse.time":
		if e.complexity.AggregatedHealthResponse.Time == nil {
			break
		}

		return e.complexity.AggregatedHealthResponse.Time(childComplexity), true

	case "AggregatedHealthResponse.version":
		if e.complexity.AggregatedHealthResponse.Version == nil {
			break
		}

		return e.complexity.AggregatedHealthResponse.Version(childComplexity), true

	case "AggregatedOptions.themes":
		if e.complexity.AggregatedOptions.Themes == nil {
			break
		}

		return e.complexity.AggregatedOptions.Themes(childComplexity), true

	case "AggregationResult.authors":
		if e.complexity.AggregationResult.Authors == nil {
			break
		}

		return e.complexity.AggregationResult.Authors(childComplexity), true

	case "AnalyzeResult.author":
		if e.complexity.AnalyzeResult.Author == nil {
			break
		}

		return e.complexity.AnalyzeResult.Author(childComplexity), true

	case "AnalyzeResult.book":
		if e.complexity.AnalyzeResult.Book == nil {
			break
		}

		return e.complexity.AnalyzeResult.Book(childComplexity), true

	case "AnalyzeResult.reference":
		if e.complexity.AnalyzeResult.Reference == nil {
			break
		}

		return e.complexity.AnalyzeResult.Reference(childComplexity), true

	case "AnalyzeResult.referenceLink":
		if e.complexity.AnalyzeResult.ReferenceLink == nil {
			break
		}

		return e.complexity.AnalyzeResult.ReferenceLink(childComplexity), true

	case "AnalyzeResult.text":
		if e.complexity.AnalyzeResult.Text == nil {
			break
		}

		return e.complexity.AnalyzeResult.Text(childComplexity), true

	case "AnalyzeTextResponse.conjugations":
		if e.complexity.AnalyzeTextResponse.Conjugations == nil {
			break
		}

		return e.complexity.AnalyzeTextResponse.Conjugations(childComplexity), true

	case "AnalyzeTextResponse.rootword":
		if e.complexity.AnalyzeTextResponse.Rootword == nil {
			break
		}

		return e.complexity.AnalyzeTextResponse.Rootword(childComplexity), true

	case "AnalyzeTextResponse.texts":
		if e.complexity.AnalyzeTextResponse.Texts == nil {
			break
		}

		return e.complexity.AnalyzeTextResponse.Texts(childComplexity), true

	case "AnswerSection.answerSentence":
		if e.complexity.AnswerSection.AnswerSentence == nil {
			break
		}

		return e.complexity.AnswerSection.AnswerSentence(childComplexity), true

	case "AnswerSection.levenshteinPercentage":
		if e.complexity.AnswerSection.LevenshteinPercentage == nil {
			break
		}

		return e.complexity.AnswerSection.LevenshteinPercentage(childComplexity), true

	case "AnswerSection.quizSentence":
		if e.complexity.AnswerSection.QuizSentence == nil {
			break
		}

		return e.complexity.AnswerSection.QuizSentence(childComplexity), true

	case "AnswerSection.section":
		if e.complexity.AnswerSection.Section == nil {
			break
		}

		return e.complexity.AnswerSection.Section(childComplexity), true

	case "AuthorBasedAnswerResponse.correct":
		if e.complexity.AuthorBasedAnswerResponse.Correct == nil {
			break
		}

		return e.complexity.AuthorBasedAnswerResponse.Correct(childComplexity), true

	case "AuthorBasedAnswerResponse.finished":
		if e.complexity.AuthorBasedAnswerResponse.Finished == nil {
			break
		}

		return e.complexity.AuthorBasedAnswerResponse.Finished(childComplexity), true

	case "AuthorBasedAnswerResponse.progress":
		if e.complexity.AuthorBasedAnswerResponse.Progress == nil {
			break
		}

		return e.complexity.AuthorBasedAnswerResponse.Progress(childComplexity), true

	case "AuthorBasedAnswerResponse.quizWord":
		if e.complexity.AuthorBasedAnswerResponse.QuizWord == nil {
			break
		}

		return e.complexity.AuthorBasedAnswerResponse.QuizWord(childComplexity), true

	case "AuthorBasedAnswerResponse.wordsInText":
		if e.complexity.AuthorBasedAnswerResponse.WordsInText == nil {
			break
		}

		return e.complexity.AuthorBasedAnswerResponse.WordsInText(childComplexity), true

	case "AuthorBasedOptions.quizWord":
		if e.complexity.AuthorBasedOptions.QuizWord == nil {
			break
		}

		return e.complexity.AuthorBasedOptions.QuizWord(childComplexity), true

	case "AuthorBasedQuiz.numberOfItems":
		if e.complexity.AuthorBasedQuiz.NumberOfItems == nil {
			break
		}

		return e.complexity.AuthorBasedQuiz.NumberOfItems(childComplexity), true

	case "AuthorBasedQuiz.options":
		if e.complexity.AuthorBasedQuiz.Options == nil {
			break
		}

		return e.complexity.AuthorBasedQuiz.Options(childComplexity), true

	case "AuthorBasedQuiz.quizItem":
		if e.complexity.AuthorBasedQuiz.QuizItem == nil {
			break
		}

		return e.complexity.AuthorBasedQuiz.QuizItem(childComplexity), true

	case "AuthorBasedResponse.fullSentence":
		if e.complexity.AuthorBasedResponse.FullSentence == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.FullSentence(childComplexity), true

	case "AuthorBasedResponse.grammarQuiz":
		if e.complexity.AuthorBasedResponse.GrammarQuiz == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.GrammarQuiz(childComplexity), true

	case "AuthorBasedResponse.progress":
		if e.complexity.AuthorBasedResponse.Progress == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.Progress(childComplexity), true

	case "AuthorBasedResponse.quiz":
		if e.complexity.AuthorBasedResponse.Quiz == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.Quiz(childComplexity), true

	case "AuthorBasedResponse.reference":
		if e.complexity.AuthorBasedResponse.Reference == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.Reference(childComplexity), true

	case "AuthorBasedResponse.translation":
		if e.complexity.AuthorBasedResponse.Translation == nil {
			break
		}

		return e.complexity.AuthorBasedResponse.Translation(childComplexity), true

	case "AuthorBasedWordForm.dictionaryForm":
		if e.complexity.AuthorBasedWordForm.DictionaryForm == nil {
			break
		}

		return e.complexity.AuthorBasedWordForm.DictionaryForm(childComplexity), true

	case "AuthorBasedWordForm.wordsInText":
		if e.complexity.AuthorBasedWordForm.WordsInText == nil {
			break
		}

		return e.complexity.AuthorBasedWordForm.WordsInText(childComplexity), true

	case "AuthorBasedWordFormsResponse.forms":
		if e.complexity.AuthorBasedWordFormsResponse.Forms == nil {
			break
		}

		return e.complexity.AuthorBasedWordFormsResponse.Forms(childComplexity), true

	case "CheckTextResponse.averageLevenshteinPercentage":
		if e.complexity.CheckTextResponse.AverageLevenshteinPercentage == nil {
			break
		}

		return e.complexity.CheckTextResponse.AverageLevenshteinPercentage(childComplexity), true

	case "CheckTextResponse.possibleTypos":
		if e.complexity.CheckTextResponse.PossibleTypos == nil {
			break
		}

		return e.complexity.CheckTextResponse.PossibleTypos(childComplexity), true

	case "CheckTextResponse.sections":
		if e.complexity.CheckTextResponse.Sections == nil {
			break
		}

		return e.complexity.CheckTextResponse.Sections(childComplexity), true

	case "ComprehensiveResponse.correct":
		if e.complexity.ComprehensiveResponse.Correct == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.Correct(childComplexity), true

	case "ComprehensiveResponse.finished":
		if e.complexity.ComprehensiveResponse.Finished == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.Finished(childComplexity), true

	case "ComprehensiveResponse.foundInText":
		if e.complexity.ComprehensiveResponse.FoundInText == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.FoundInText(childComplexity), true

	case "ComprehensiveResponse.progress":
		if e.complexity.ComprehensiveResponse.Progress == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.Progress(childComplexity), true

	case "ComprehensiveResponse.quizWord":
		if e.complexity.ComprehensiveResponse.QuizWord == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.QuizWord(childComplexity), true

	case "ComprehensiveResponse.similarWords":
		if e.complexity.ComprehensiveResponse.SimilarWords == nil {
			break
		}

		return e.complexity.ComprehensiveResponse.SimilarWords(childComplexity), true

	case "ConjugationResponse.rule":
		if e.complexity.ConjugationResponse.Rule == nil {
			break
		}

		return e.complexity.ConjugationResponse.Rule(childComplexity), true

	case "ConjugationResponse.word":
		if e.complexity.ConjugationResponse.Word == nil {
			break
		}

		return e.complexity.ConjugationResponse.Word(childComplexity), true

	case "Coordinates.x":
		if e.complexity.Coordinates.X == nil {
			break
		}

		return e.complexity.Coordinates.X(childComplexity), true

	case "Coordinates.y":
		if e.complexity.Coordinates.Y == nil {
			break
		}

		return e.complexity.Coordinates.Y(childComplexity), true

	case "Database.clusterName":
		if e.complexity.Database.ClusterName == nil {
			break
		}

		return e.complexity.Database.ClusterName(childComplexity), true

	case "Database.healthy":
		if e.complexity.Database.Healthy == nil {
			break
		}

		return e.complexity.Database.Healthy(childComplexity), true

	case "Database.serverName":
		if e.complexity.Database.ServerName == nil {
			break
		}

		return e.complexity.Database.ServerName(childComplexity), true

	case "Database.serverVersion":
		if e.complexity.Database.ServerVersion == nil {
			break
		}

		return e.complexity.Database.ServerVersion(childComplexity), true

	case "DatabaseInfo.clusterName":
		if e.complexity.DatabaseInfo.ClusterName == nil {
			break
		}

		return e.complexity.DatabaseInfo.ClusterName(childComplexity), true

	case "DatabaseInfo.healthy":
		if e.complexity.DatabaseInfo.Healthy == nil {
			break
		}

		return e.complexity.DatabaseInfo.Healthy(childComplexity), true

	case "DatabaseInfo.serverName":
		if e.complexity.DatabaseInfo.ServerName == nil {
			break
		}

		return e.complexity.DatabaseInfo.ServerName(childComplexity), true

	case "DatabaseInfo.serverVersion":
		if e.complexity.DatabaseInfo.ServerVersion == nil {
			break
		}

		return e.complexity.DatabaseInfo.ServerVersion(childComplexity), true

	case "DeclensionTranslationResult.results":
		if e.complexity.DeclensionTranslationResult.Results == nil {
			break
		}

		return e.complexity.DeclensionTranslationResult.Results(childComplexity), true

	case "Dialogue.introduction":
		if e.complexity.Dialogue.Introduction == nil {
			break
		}

		return e.complexity.Dialogue.Introduction(childComplexity), true

	case "Dialogue.linkToPerseus":
		if e.complexity.Dialogue.LinkToPerseus == nil {
			break
		}

		return e.complexity.Dialogue.LinkToPerseus(childComplexity), true

	case "Dialogue.section":
		if e.complexity.Dialogue.Section == nil {
			break
		}

		return e.complexity.Dialogue.Section(childComplexity), true

	case "Dialogue.speakers":
		if e.complexity.Dialogue.Speakers == nil {
			break
		}

		return e.complexity.Dialogue.Speakers(childComplexity), true

	case "DialogueAnswer.answer":
		if e.complexity.DialogueAnswer.Answer == nil {
			break
		}

		return e.complexity.DialogueAnswer.Answer(childComplexity), true

	case "DialogueAnswer.input":
		if e.complexity.DialogueAnswer.Input == nil {
			break
		}

		return e.complexity.DialogueAnswer.Input(childComplexity), true

	case "DialogueAnswer.percentage":
		if e.complexity.DialogueAnswer.Percentage == nil {
			break
		}

		return e.complexity.DialogueAnswer.Percentage(childComplexity), true

	case "DialogueAnswer.wronglyPlaced":
		if e.complexity.DialogueAnswer.WronglyPlaced == nil {
			break
		}

		return e.complexity.DialogueAnswer.WronglyPlaced(childComplexity), true

	case "DialogueContent.greek":
		if e.complexity.DialogueContent.Greek == nil {
			break
		}

		return e.complexity.DialogueContent.Greek(childComplexity), true

	case "DialogueContent.place":
		if e.complexity.DialogueContent.Place == nil {
			break
		}

		return e.complexity.DialogueContent.Place(childComplexity), true

	case "DialogueContent.speaker":
		if e.complexity.DialogueContent.Speaker == nil {
			break
		}

		return e.complexity.DialogueContent.Speaker(childComplexity), true

	case "DialogueContent.translation":
		if e.complexity.DialogueContent.Translation == nil {
			break
		}

		return e.complexity.DialogueContent.Translation(childComplexity), true

	case "DialogueCorrection.correctPlace":
		if e.complexity.DialogueCorrection.CorrectPlace == nil {
			break
		}

		return e.complexity.DialogueCorrection.CorrectPlace(childComplexity), true

	case "DialogueCorrection.greek":
		if e.complexity.DialogueCorrection.Greek == nil {
			break
		}

		return e.complexity.DialogueCorrection.Greek(childComplexity), true

	case "DialogueCorrection.place":
		if e.complexity.DialogueCorrection.Place == nil {
			break
		}

		return e.complexity.DialogueCorrection.Place(childComplexity), true

	case "DialogueCorrection.speaker":
		if e.complexity.DialogueCorrection.Speaker == nil {
			break
		}

		return e.complexity.DialogueCorrection.Speaker(childComplexity), true

	case "DialogueCorrection.translation":
		if e.complexity.DialogueCorrection.Translation == nil {
			break
		}

		return e.complexity.DialogueCorrection.Translation(childComplexity), true

	case "DialogueQuizResponse.content":
		if e.complexity.DialogueQuizResponse.Content == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Content(childComplexity), true

	case "DialogueQuizResponse.dialogue":
		if e.complexity.DialogueQuizResponse.Dialogue == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Dialogue(childComplexity), true

	case "DialogueQuizResponse.quizMetadata":
		if e.complexity.DialogueQuizResponse.QuizMetadata == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.QuizMetadata(childComplexity), true

	case "DialogueQuizResponse.reference":
		if e.complexity.DialogueQuizResponse.Reference == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Reference(childComplexity), true

	case "DialogueQuizResponse.segment":
		if e.complexity.DialogueQuizResponse.Segment == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Segment(childComplexity), true

	case "DialogueQuizResponse.set":
		if e.complexity.DialogueQuizResponse.Set == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Set(childComplexity), true

	case "DialogueQuizResponse.theme":
		if e.complexity.DialogueQuizResponse.Theme == nil {
			break
		}

		return e.complexity.DialogueQuizResponse.Theme(childComplexity), true

	case "ESAuthor.books":
		if e.complexity.ESAuthor.Books == nil {
			break
		}

		return e.complexity.ESAuthor.Books(childComplexity), true

	case "ESAuthor.key":
		if e.complexity.ESAuthor.Key == nil {
			break
		}

		return e.complexity.ESAuthor.Key(childComplexity), true

	case "ESBook.key":
		if e.complexity.ESBook.Key == nil {
			break
		}

		return e.complexity.ESBook.Key(childComplexity), true

	case "ESBook.references":
		if e.complexity.ESBook.References == nil {
			break
		}

		return e.complexity.ESBook.References(childComplexity), true

	case "ExtendedDictionary.hits":
		if e.complexity.ExtendedDictionary.Hits == nil {
			break
		}

		return e.complexity.ExtendedDictionary.Hits(childComplexity), true

	case "ExtendedDictionaryEntry.foundInText":
		if e.complexity.ExtendedDictionaryEntry.FoundInText == nil {
			break
		}

		return e.complexity.ExtendedDictionaryEntry.FoundInText(childComplexity), true

	case "ExtendedDictionaryEntry.hit":
		if e.complexity.ExtendedDictionaryEntry.Hit == nil {
			break
		}

		return e.complexity.ExtendedDictionaryEntry.Hit(childComplexity), true

	case "FinalTranslationQuiz.answer":
		if e.complexity.FinalTranslationQuiz.Answer == nil {
			break
		}

		return e.complexity.FinalTranslationQuiz.Answer(childComplexity), true

	case "FinalTranslationQuiz.instruction":
		if e.complexity.FinalTranslationQuiz.Instruction == nil {
			break
		}

		return e.complexity.FinalTranslationQuiz.Instruction(childComplexity), true

	case "FinalTranslationQuiz.options":
		if e.complexity.FinalTranslationQuiz.Options == nil {
			break
		}

		return e.complexity.FinalTranslationQuiz.Options(childComplexity), true

	case "GrammarAnswer.correct":
		if e.complexity.GrammarAnswer.Correct == nil {
			break
		}

		return e.complexity.GrammarAnswer.Correct(childComplexity), true

	case "GrammarAnswer.finished":
		if e.complexity.GrammarAnswer.Finished == nil {
			break
		}

		return e.complexity.GrammarAnswer.Finished(childComplexity), true

	case "GrammarAnswer.foundInText":
		if e.complexity.GrammarAnswer.FoundInText == nil {
			break
		}

		return e.complexity.GrammarAnswer.FoundInText(childComplexity), true

	case "GrammarAnswer.progress":
		if e.complexity.GrammarAnswer.Progress == nil {
			break
		}

		return e.complexity.GrammarAnswer.Progress(childComplexity), true

	case "GrammarAnswer.quizWord":
		if e.complexity.GrammarAnswer.QuizWord == nil {
			break
		}

		return e.complexity.GrammarAnswer.QuizWord(childComplexity), true

	case "GrammarAnswer.similarWords":
		if e.complexity.GrammarAnswer.SimilarWords == nil {
			break
		}

		return e.complexity.GrammarAnswer.SimilarWords(childComplexity), true

	case "GrammarOption.option":
		if e.complexity.GrammarOption.Option == nil {
			break
		}

		return e.complexity.GrammarOption.Option(childComplexity), true

	case "GrammarOptions.themes":
		if e.complexity.GrammarOptions.Themes == nil {
			break
		}

		return e.complexity.GrammarOptions.Themes(childComplexity), true

	case "GrammarQuizAdded.correctAnswer":
		if e.complexity.GrammarQuizAdded.CorrectAnswer == nil {
			break
		}

		return e.complexity.GrammarQuizAdded.CorrectAnswer(childComplexity), true

	case "GrammarQuizAdded.extraInformation":
		if e.complexity.GrammarQuizAdded.ExtraInformation == nil {
			break
		}

		return e.complexity.GrammarQuizAdded.ExtraInformation(childComplexity), true

	case "GrammarQuizAdded.options":
		if e.complexity.GrammarQuizAdded.Options == nil {
			break
		}

		return e.complexity.GrammarQuizAdded.Options(childComplexity), true

	case "GrammarQuizAdded.wordInText":
		if e.complexity.GrammarQuizAdded.WordInText == nil {
			break
		}

		return e.complexity.GrammarQuizAdded.WordInText(childComplexity), true

	case "GrammarQuizResponse.contractionRule":
		if e.complexity.GrammarQuizResponse.ContractionRule == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.ContractionRule(childComplexity), true

	case "GrammarQuizResponse.description":
		if e.complexity.GrammarQuizResponse.Description == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Description(childComplexity), true

	case "GrammarQuizResponse.dictionaryForm":
		if e.complexity.GrammarQuizResponse.DictionaryForm == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.DictionaryForm(childComplexity), true

	case "GrammarQuizResponse.difficulty":
		if e.complexity.GrammarQuizResponse.Difficulty == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Difficulty(childComplexity), true

	case "GrammarQuizResponse.numberOfItems":
		if e.complexity.GrammarQuizResponse.NumberOfItems == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.NumberOfItems(childComplexity), true

	case "GrammarQuizResponse.options":
		if e.complexity.GrammarQuizResponse.Options == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Options(childComplexity), true

	case "GrammarQuizResponse.progress":
		if e.complexity.GrammarQuizResponse.Progress == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Progress(childComplexity), true

	case "GrammarQuizResponse.quizItem":
		if e.complexity.GrammarQuizResponse.QuizItem == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.QuizItem(childComplexity), true

	case "GrammarQuizResponse.stem":
		if e.complexity.GrammarQuizResponse.Stem == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Stem(childComplexity), true

	case "GrammarQuizResponse.translation":
		if e.complexity.GrammarQuizResponse.Translation == nil {
			break
		}

		return e.complexity.GrammarQuizResponse.Translation(childComplexity), true

	case "GrammarSegment.difficulty":
		if e.complexity.GrammarSegment.Difficulty == nil {
			break
		}

		return e.complexity.GrammarSegment.Difficulty(childComplexity), true

	case "GrammarSegment.maxSet":
		if e.complexity.GrammarSegment.MaxSet == nil {
			break
		}

		return e.complexity.GrammarSegment.MaxSet(childComplexity), true

	case "GrammarSegment.name":
		if e.complexity.GrammarSegment.Name == nil {
			break
		}

		return e.complexity.GrammarSegment.Name(childComplexity), true

	case "GrammarThemes.name":
		if e.complexity.GrammarThemes.Name == nil {
			break
		}

		return e.complexity.GrammarThemes.Name(childComplexity), true

	case "GrammarThemes.segments":
		if e.complexity.GrammarThemes.Segments == nil {
			break
		}

		return e.complexity.GrammarThemes.Segments(childComplexity), true

	case "Health.database":
		if e.complexity.Health.Database == nil {
			break
		}

		return e.complexity.Health.Database(childComplexity), true

	case "Health.healthy":
		if e.complexity.Health.Healthy == nil {
			break
		}

		return e.complexity.Health.Healthy(childComplexity), true

	case "Health.time":
		if e.complexity.Health.Time == nil {
			break
		}

		return e.complexity.Health.Time(childComplexity), true

	case "Hit.dutch":
		if e.complexity.Hit.Dutch == nil {
			break
		}

		return e.complexity.Hit.Dutch(childComplexity), true

	case "Hit.english":
		if e.complexity.Hit.English == nil {
			break
		}

		return e.complexity.Hit.English(childComplexity), true

	case "Hit.greek":
		if e.complexity.Hit.Greek == nil {
			break
		}

		return e.complexity.Hit.Greek(childComplexity), true

	case "Hit.linkedWord":
		if e.complexity.Hit.LinkedWord == nil {
			break
		}

		return e.complexity.Hit.LinkedWord(childComplexity), true

	case "Hit.original":
		if e.complexity.Hit.Original == nil {
			break
		}

		return e.complexity.Hit.Original(childComplexity), true

	case "JourneyOptions.themes":
		if e.complexity.JourneyOptions.Themes == nil {
			break
		}

		return e.complexity.JourneyOptions.Themes(childComplexity), true

	case "JourneySegment.coordinates":
		if e.complexity.JourneySegment.Coordinates == nil {
			break
		}

		return e.complexity.JourneySegment.Coordinates(childComplexity), true

	case "JourneySegment.location":
		if e.complexity.JourneySegment.Location == nil {
			break
		}

		return e.complexity.JourneySegment.Location(childComplexity), true

	case "JourneySegment.name":
		if e.complexity.JourneySegment.Name == nil {
			break
		}

		return e.complexity.JourneySegment.Name(childComplexity), true

	case "JourneySegment.number":
		if e.complexity.JourneySegment.Number == nil {
			break
		}

		return e.complexity.JourneySegment.Number(childComplexity), true

	case "JourneySegmentQuiz.contextNote":
		if e.complexity.JourneySegmentQuiz.ContextNote == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.ContextNote(childComplexity), true

	case "JourneySegmentQuiz.intro":
		if e.complexity.JourneySegmentQuiz.Intro == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Intro(childComplexity), true

	case "JourneySegmentQuiz.number":
		if e.complexity.JourneySegmentQuiz.Number == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Number(childComplexity), true

	case "JourneySegmentQuiz.quiz":
		if e.complexity.JourneySegmentQuiz.Quiz == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Quiz(childComplexity), true

	case "JourneySegmentQuiz.segment":
		if e.complexity.JourneySegmentQuiz.Segment == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Segment(childComplexity), true

	case "JourneySegmentQuiz.sentence":
		if e.complexity.JourneySegmentQuiz.Sentence == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Sentence(childComplexity), true

	case "JourneySegmentQuiz.theme":
		if e.complexity.JourneySegmentQuiz.Theme == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Theme(childComplexity), true

	case "JourneySegmentQuiz.translation":
		if e.complexity.JourneySegmentQuiz.Translation == nil {
			break
		}

		return e.complexity.JourneySegmentQuiz.Translation(childComplexity), true

	case "JourneyThemes.name":
		if e.complexity.JourneyThemes.Name == nil {
			break
		}

		return e.complexity.JourneyThemes.Name(childComplexity), true

	case "JourneyThemes.segments":
		if e.complexity.JourneyThemes.Segments == nil {
			break
		}

		return e.complexity.JourneyThemes.Segments(childComplexity), true

	case "MatchQuiz.instruction":
		if e.complexity.MatchQuiz.Instruction == nil {
			break
		}

		return e.complexity.MatchQuiz.Instruction(childComplexity), true

	case "MatchQuiz.pairs":
		if e.complexity.MatchQuiz.Pairs == nil {
			break
		}

		return e.complexity.MatchQuiz.Pairs(childComplexity), true

	case "MediaOptions.audioUrl":
		if e.complexity.MediaOptions.AudioURL == nil {
			break
		}

		return e.complexity.MediaOptions.AudioURL(childComplexity), true

	case "MediaOptions.imageUrl":
		if e.complexity.MediaOptions.ImageURL == nil {
			break
		}

		return e.complexity.MediaOptions.ImageURL(childComplexity), true

	case "MediaOptions.option":
		if e.complexity.MediaOptions.Option == nil {
			break
		}

		return e.complexity.MediaOptions.Option(childComplexity), true

	case "MediaPair.answer":
		if e.complexity.MediaPair.Answer == nil {
			break
		}

		return e.complexity.MediaPair.Answer(childComplexity), true

	case "MediaPair.word":
		if e.complexity.MediaPair.Word == nil {
			break
		}

		return e.complexity.MediaPair.Word(childComplexity), true

	case "MediaQuiz.instruction":
		if e.complexity.MediaQuiz.Instruction == nil {
			break
		}

		return e.complexity.MediaQuiz.Instruction(childComplexity), true

	case "MediaQuiz.mediaFiles":
		if e.complexity.MediaQuiz.MediaFiles == nil {
			break
		}

		return e.complexity.MediaQuiz.MediaFiles(childComplexity), true

	case "MediaQuizResponse.numberOfItems":
		if e.complexity.MediaQuizResponse.NumberOfItems == nil {
			break
		}

		return e.complexity.MediaQuizResponse.NumberOfItems(childComplexity), true

	case "MediaQuizResponse.options":
		if e.complexity.MediaQuizResponse.Options == nil {
			break
		}

		return e.complexity.MediaQuizResponse.Options(childComplexity), true

	case "MediaQuizResponse.progress":
		if e.complexity.MediaQuizResponse.Progress == nil {
			break
		}

		return e.complexity.MediaQuizResponse.Progress(childComplexity), true

	case "MediaQuizResponse.quizItem":
		if e.complexity.MediaQuizResponse.QuizItem == nil {
			break
		}

		return e.complexity.MediaQuizResponse.QuizItem(childComplexity), true

	case "MultipleChoiceResponse.numberOfItems":
		if e.complexity.MultipleChoiceResponse.NumberOfItems == nil {
			break
		}

		return e.complexity.MultipleChoiceResponse.NumberOfItems(childComplexity), true

	case "MultipleChoiceResponse.options":
		if e.complexity.MultipleChoiceResponse.Options == nil {
			break
		}

		return e.complexity.MultipleChoiceResponse.Options(childComplexity), true

	case "MultipleChoiceResponse.progress":
		if e.complexity.MultipleChoiceResponse.Progress == nil {
			break
		}

		return e.complexity.MultipleChoiceResponse.Progress(childComplexity), true

	case "MultipleChoiceResponse.quizItem":
		if e.complexity.MultipleChoiceResponse.QuizItem == nil {
			break
		}

		return e.complexity.MultipleChoiceResponse.QuizItem(childComplexity), true

	case "MultipleTheme.maxSet":
		if e.complexity.MultipleTheme.MaxSet == nil {
			break
		}

		return e.complexity.MultipleTheme.MaxSet(childComplexity), true

	case "MultipleTheme.name":
		if e.complexity.MultipleTheme.Name == nil {
			break
		}

		return e.complexity.MultipleTheme.Name(childComplexity), true

	case "Options.option":
		if e.complexity.Options.Option == nil {
			break
		}

		return e.complexity.Options.Option(childComplexity), true

	case "ProgressEntry.correctCount":
		if e.complexity.ProgressEntry.CorrectCount == nil {
			break
		}

		return e.complexity.ProgressEntry.CorrectCount(childComplexity), true

	case "ProgressEntry.greek":
		if e.complexity.ProgressEntry.Greek == nil {
			break
		}

		return e.complexity.ProgressEntry.Greek(childComplexity), true

	case "ProgressEntry.incorrectCount":
		if e.complexity.ProgressEntry.IncorrectCount == nil {
			break
		}

		return e.complexity.ProgressEntry.IncorrectCount(childComplexity), true

	case "ProgressEntry.lastPlayed":
		if e.complexity.ProgressEntry.LastPlayed == nil {
			break
		}

		return e.complexity.ProgressEntry.LastPlayed(childComplexity), true

	case "ProgressEntry.playCount":
		if e.complexity.ProgressEntry.PlayCount == nil {
			break
		}

		return e.complexity.ProgressEntry.PlayCount(childComplexity), true

	case "ProgressEntry.translation":
		if e.complexity.ProgressEntry.Translation == nil {
			break
		}

		return e.complexity.ProgressEntry.Translation(childComplexity), true

	case "Query.analyze":
		if e.complexity.Query.Analyze == nil {
			break
		}

		args, err := ec.field_Query_analyze_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Analyze(childComplexity, args["rootword"].(*string)), true

	case "Query.authorBasedAnswer":
		if e.complexity.Query.AuthorBasedAnswer == nil {
			break
		}

		args, err := ec.field_Query_authorBasedAnswer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthorBasedAnswer(childComplexity, args["input"].(*model.AuthorBasedAnswerInput)), true

	case "Query.authorBasedOptions":
		if e.complexity.Query.AuthorBasedOptions == nil {
			break
		}

		return e.complexity.Query.AuthorBasedOptions(childComplexity), true

	case "Query.authorBasedQuiz":
		if e.complexity.Query.AuthorBasedQuiz == nil {
			break
		}

		args, err := ec.field_Query_authorBasedQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthorBasedQuiz(childComplexity, args["input"].(*model.AuthorBasedInput)), true

	case "Query.authorBasedWordForms":
		if e.complexity.Query.AuthorBasedWordForms == nil {
			break
		}

		args, err := ec.field_Query_authorBasedWordForms_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthorBasedWordForms(childComplexity, args["input"].(*model.AuthorBasedWordFormsInput)), true

	case "Query.check":
		if e.complexity.Query.Check == nil {
			break
		}

		args, err := ec.field_Query_check_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Check(childComplexity, args["input"].(*model.CheckTextRequestInput)), true

	case "Query.create":
		if e.complexity.Query.Create == nil {
			break
		}

		args, err := ec.field_Query_create_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Create(childComplexity, args["input"].(*model.CreateTextInput)), true

	case "Query.dialogueAnswer":
		if e.complexity.Query.DialogueAnswer == nil {
			break
		}

		args, err := ec.field_Query_dialogueAnswer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DialogueAnswer(childComplexity, args["input"].(*model.DialogueAnswerInput)), true

	case "Query.dialogueOptions":
		if e.complexity.Query.DialogueOptions == nil {
			break
		}

		return e.complexity.Query.DialogueOptions(childComplexity), true

	case "Query.dialogueQuiz":
		if e.complexity.Query.DialogueQuiz == nil {
			break
		}

		args, err := ec.field_Query_dialogueQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DialogueQuiz(childComplexity, args["input"].(*model.DialogueQuizInput)), true

	case "Query.dictionary":
		if e.complexity.Query.Dictionary == nil {
			break
		}

		args, err := ec.field_Query_dictionary_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Dictionary(childComplexity, args["language"].(*string), args["mode"].(*string), args["searchInText"].(*bool), args["word"].(*string)), true

	case "Query.grammar":
		if e.complexity.Query.Grammar == nil {
			break
		}

		args, err := ec.field_Query_grammar_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Grammar(childComplexity, args["word"].(*string)), true

	case "Query.grammarAnswer":
		if e.complexity.Query.GrammarAnswer == nil {
			break
		}

		args, err := ec.field_Query_grammarAnswer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GrammarAnswer(childComplexity, args["input"].(*model.GrammarAnswerInput)), true

	case "Query.grammarOptions":
		if e.complexity.Query.GrammarOptions == nil {
			break
		}

		return e.complexity.Query.GrammarOptions(childComplexity), true

	case "Query.grammarQuiz":
		if e.complexity.Query.GrammarQuiz == nil {
			break
		}

		args, err := ec.field_Query_grammarQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GrammarQuiz(childComplexity, args["input"].(*model.GrammarQuizInput)), true

	case "Query.health":
		if e.complexity.Query.Health == nil {
			break
		}

		return e.complexity.Query.Health(childComplexity), true

	case "Query.journeyOptions":
		if e.complexity.Query.JourneyOptions == nil {
			break
		}

		return e.complexity.Query.JourneyOptions(childComplexity), true

	case "Query.journeyQuiz":
		if e.complexity.Query.JourneyQuiz == nil {
			break
		}

		args, err := ec.field_Query_journeyQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JourneyQuiz(childComplexity, args["input"].(*model.JourneyQuizInput)), true

	case "Query.mediaAnswer":
		if e.complexity.Query.MediaAnswer == nil {
			break
		}

		args, err := ec.field_Query_mediaAnswer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaAnswer(childComplexity, args["input"].(*model.MediaAnswerInput)), true

	case "Query.mediaOptions":
		if e.complexity.Query.MediaOptions == nil {
			break
		}

		return e.complexity.Query.MediaOptions(childComplexity), true

	case "Query.mediaQuiz":
		if e.complexity.Query.MediaQuiz == nil {
			break
		}

		args, err := ec.field_Query_mediaQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaQuiz(childComplexity, args["input"].(*model.MediaQuizInput)), true

	case "Query.multipleChoiceAnswer":
		if e.complexity.Query.MultipleChoiceAnswer == nil {
			break
		}

		args, err := ec.field_Query_multipleChoiceAnswer_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MultipleChoiceAnswer(childComplexity, args["input"].(*model.MultipleChoiceAnswerInput)), true

	case "Query.multipleChoiceOptions":
		if e.complexity.Query.MultipleChoiceOptions == nil {
			break
		}

		return e.complexity.Query.MultipleChoiceOptions(childComplexity), true

	case "Query.multipleChoiceQuiz":
		if e.complexity.Query.MultipleChoiceQuiz == nil {
			break
		}

		args, err := ec.field_Query_multipleChoiceQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MultipleChoiceQuiz(childComplexity, args["input"].(*model.MultipleQuizInput)), true

	case "Query.status":
		if e.complexity.Query.Status == nil {
			break
		}

		return e.complexity.Query.Status(childComplexity), true

	case "Query.textOptions":
		if e.complexity.Query.TextOptions == nil {
			break
		}

		return e.complexity.Query.TextOptions(childComplexity), true

	case "QuizIntro.author":
		if e.complexity.QuizIntro.Author == nil {
			break
		}

		return e.complexity.QuizIntro.Author(childComplexity), true

	case "QuizIntro.background":
		if e.complexity.QuizIntro.Background == nil {
			break
		}

		return e.complexity.QuizIntro.Background(childComplexity), true

	case "QuizIntro.work":
		if e.complexity.QuizIntro.Work == nil {
			break
		}

		return e.complexity.QuizIntro.Work(childComplexity), true

	case "QuizMetadata.language":
		if e.complexity.QuizMetadata.Language == nil {
			break
		}

		return e.complexity.QuizMetadata.Language(childComplexity), true

	case "QuizPair.answer":
		if e.complexity.QuizPair.Answer == nil {
			break
		}

		return e.complexity.QuizPair.Answer(childComplexity), true

	case "QuizPair.greek":
		if e.complexity.QuizPair.Greek == nil {
			break
		}

		return e.complexity.QuizPair.Greek(childComplexity), true

	case "Reference.key":
		if e.complexity.Reference.Key == nil {
			break
		}

		return e.complexity.Reference.Key(childComplexity), true

	case "Reference.sections":
		if e.complexity.Reference.Sections == nil {
			break
		}

		return e.complexity.Reference.Sections(childComplexity), true

	case "Result.rootWord":
		if e.complexity.Result.RootWord == nil {
			break
		}

		return e.complexity.Result.RootWord(childComplexity), true

	case "Result.rule":
		if e.complexity.Result.Rule == nil {
			break
		}

		return e.complexity.Result.Rule(childComplexity), true

	case "Result.translations":
		if e.complexity.Result.Translations == nil {
			break
		}

		return e.complexity.Result.Translations(childComplexity), true

	case "Result.word":
		if e.complexity.Result.Word == nil {
			break
		}

		return e.complexity.Result.Word(childComplexity), true

	case "Rhema.greek":
		if e.complexity.Rhema.Greek == nil {
			break
		}

		return e.complexity.Rhema.Greek(childComplexity), true

	case "Rhema.section":
		if e.complexity.Rhema.Section == nil {
			break
		}

		return e.complexity.Rhema.Section(childComplexity), true

	case "Rhema.translations":
		if e.complexity.Rhema.Translations == nil {
			break
		}

		return e.complexity.Rhema.Translations(childComplexity), true

	case "Section.key":
		if e.complexity.Section.Key == nil {
			break
		}

		return e.complexity.Section.Key(childComplexity), true

	case "Segment.maxSet":
		if e.complexity.Segment.MaxSet == nil {
			break
		}

		return e.complexity.Segment.MaxSet(childComplexity), true

	case "Segment.name":
		if e.complexity.Segment.Name == nil {
			break
		}

		return e.complexity.Segment.Name(childComplexity), true

	case "Segments.maxSet":
		if e.complexity.Segments.MaxSet == nil {
			break
		}

		return e.complexity.Segments.MaxSet(childComplexity), true

	case "Segments.name":
		if e.complexity.Segments.Name == nil {
			break
		}

		return e.complexity.Segments.Name(childComplexity), true

	case "ServiceHealth.databaseInfo":
		if e.complexity.ServiceHealth.DatabaseInfo == nil {
			break
		}

		return e.complexity.ServiceHealth.DatabaseInfo(childComplexity), true

	case "ServiceHealth.healthy":
		if e.complexity.ServiceHealth.Healthy == nil {
			break
		}

		return e.complexity.ServiceHealth.Healthy(childComplexity), true

	case "ServiceHealth.name":
		if e.complexity.ServiceHealth.Name == nil {
			break
		}

		return e.complexity.ServiceHealth.Name(childComplexity), true

	case "ServiceHealth.version":
		if e.complexity.ServiceHealth.Version == nil {
			break
		}

		return e.complexity.ServiceHealth.Version(childComplexity), true

	case "Speaker.name":
		if e.complexity.Speaker.Name == nil {
			break
		}

		return e.complexity.Speaker.Name(childComplexity), true

	case "Speaker.shorthand":
		if e.complexity.Speaker.Shorthand == nil {
			break
		}

		return e.complexity.Speaker.Shorthand(childComplexity), true

	case "Speaker.translation":
		if e.complexity.Speaker.Translation == nil {
			break
		}

		return e.complexity.Speaker.Translation(childComplexity), true

	case "Status.alexandros":
		if e.complexity.Status.Alexandros == nil {
			break
		}

		return e.complexity.Status.Alexandros(childComplexity), true

	case "Status.dionysios":
		if e.complexity.Status.Dionysios == nil {
			break
		}

		return e.complexity.Status.Dionysios(childComplexity), true

	case "Status.herodotos":
		if e.complexity.Status.Herodotos == nil {
			break
		}

		return e.complexity.Status.Herodotos(childComplexity), true

	case "Status.overallHealth":
		if e.complexity.Status.OverallHealth == nil {
			break
		}

		return e.complexity.Status.OverallHealth(childComplexity), true

	case "StructureQuiz.answer":
		if e.complexity.StructureQuiz.Answer == nil {
			break
		}

		return e.complexity.StructureQuiz.Answer(childComplexity), true

	case "StructureQuiz.note":
		if e.complexity.StructureQuiz.Note == nil {
			break
		}

		return e.complexity.StructureQuiz.Note(childComplexity), true

	case "StructureQuiz.options":
		if e.complexity.StructureQuiz.Options == nil {
			break
		}

		return e.complexity.StructureQuiz.Options(childComplexity), true

	case "StructureQuiz.question":
		if e.complexity.StructureQuiz.Question == nil {
			break
		}

		return e.complexity.StructureQuiz.Question(childComplexity), true

	case "StructureQuiz.text":
		if e.complexity.StructureQuiz.Text == nil {
			break
		}

		return e.complexity.StructureQuiz.Text(childComplexity), true

	case "StructureQuiz.title":
		if e.complexity.StructureQuiz.Title == nil {
			break
		}

		return e.complexity.StructureQuiz.Title(childComplexity), true

	case "Text.author":
		if e.complexity.Text.Author == nil {
			break
		}

		return e.complexity.Text.Author(childComplexity), true

	case "Text.book":
		if e.complexity.Text.Book == nil {
			break
		}

		return e.complexity.Text.Book(childComplexity), true

	case "Text.perseusTextLink":
		if e.complexity.Text.PerseusTextLink == nil {
			break
		}

		return e.complexity.Text.PerseusTextLink(childComplexity), true

	case "Text.reference":
		if e.complexity.Text.Reference == nil {
			break
		}

		return e.complexity.Text.Reference(childComplexity), true

	case "Text.rhemai":
		if e.complexity.Text.Rhemai == nil {
			break
		}

		return e.complexity.Text.Rhemai(childComplexity), true

	case "Text.type":
		if e.complexity.Text.Type == nil {
			break
		}

		return e.complexity.Text.Type(childComplexity), true

	case "Theme.name":
		if e.complexity.Theme.Name == nil {
			break
		}

		return e.complexity.Theme.Name(childComplexity), true

	case "Theme.segments":
		if e.complexity.Theme.Segments == nil {
			break
		}

		return e.complexity.Theme.Segments(childComplexity), true

	case "ThemedOptions.themes":
		if e.complexity.ThemedOptions.Themes == nil {
			break
		}

		return e.complexity.ThemedOptions.Themes(childComplexity), true

	case "Themes.name":
		if e.complexity.Themes.Name == nil {
			break
		}

		return e.complexity.Themes.Name(childComplexity), true

	case "Themes.segments":
		if e.complexity.Themes.Segments == nil {
			break
		}

		return e.complexity.Themes.Segments(childComplexity), true

	case "TriviaQuiz.answer":
		if e.complexity.TriviaQuiz.Answer == nil {
			break
		}

		return e.complexity.TriviaQuiz.Answer(childComplexity), true

	case "TriviaQuiz.note":
		if e.complexity.TriviaQuiz.Note == nil {
			break
		}

		return e.complexity.TriviaQuiz.Note(childComplexity), true

	case "TriviaQuiz.options":
		if e.complexity.TriviaQuiz.Options == nil {
			break
		}

		return e.complexity.TriviaQuiz.Options(childComplexity), true

	case "TriviaQuiz.question":
		if e.complexity.TriviaQuiz.Question == nil {
			break
		}

		return e.complexity.TriviaQuiz.Question(childComplexity), true

	case "Typo.provided":
		if e.complexity.Typo.Provided == nil {
			break
		}

		return e.complexity.Typo.Provided(childComplexity), true

	case "Typo.source":
		if e.complexity.Typo.Source == nil {
			break
		}

		return e.complexity.Typo.Source(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAuthorBasedAnswerInput,
		ec.unmarshalInputAuthorBasedInput,
		ec.unmarshalInputAuthorBasedWordFormsInput,
		ec.unmarshalInputCheckTextRequestInput,
		ec.unmarshalInputCreateTextInput,
		ec.unmarshalInputDialogueAnswerInput,
		ec.unmarshalInputDialogueInputContent,
		ec.unmarshalInputDialogueQuizInput,
		ec.unmarshalInputGrammarAnswerInput,
		ec.unmarshalInputGrammarQuizInput,
		ec.unmarshalInputJourneyQuizInput,
		ec.unmarshalInputMediaAnswerInput,
		ec.unmarshalInputMediaQuizInput,
		ec.unmarshalInputMultipleChoiceAnswerInput,
		ec.unmarshalInputMultipleQuizInput,
		ec.unmarshalInputTranslationsInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "homeros.graphqls" "shared.graphqls" "sokrates.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "homeros.graphqls", Input: sourceData("homeros.graphqls"), BuiltIn: false},
	{Name: "shared.graphqls", Input: sourceData("shared.graphqls"), BuiltIn: false},
	{Name: "sokrates.graphqls", Input: sourceData("sokrates.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_analyze_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_analyze_argsRootword(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["rootword"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_analyze_argsRootword(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("rootword"))
	if tmp, ok := rawArgs["rootword"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_authorBasedAnswer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_authorBasedAnswer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_authorBasedAnswer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.AuthorBasedAnswerInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOAuthorBasedAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedAnswerInput(ctx, tmp)
	}

	var zeroVal *model.AuthorBasedAnswerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_authorBasedQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_authorBasedQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_authorBasedQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.AuthorBasedInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOAuthorBasedInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedInput(ctx, tmp)
	}

	var zeroVal *model.AuthorBasedInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_authorBasedWordForms_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_authorBasedWordForms_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_authorBasedWordForms_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.AuthorBasedWordFormsInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOAuthorBasedWordFormsInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordFormsInput(ctx, tmp)
	}

	var zeroVal *model.AuthorBasedWordFormsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_check_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_check_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_check_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CheckTextRequestInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOCheckTextRequestInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCheckTextRequestInput(ctx, tmp)
	}

	var zeroVal *model.CheckTextRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_create_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_create_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_create_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.CreateTextInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOCreateTextInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCreateTextInput(ctx, tmp)
	}

	var zeroVal *model.CreateTextInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dialogueAnswer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_dialogueAnswer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_dialogueAnswer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.DialogueAnswerInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalODialogueAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueAnswerInput(ctx, tmp)
	}

	var zeroVal *model.DialogueAnswerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dialogueQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_dialogueQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_dialogueQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.DialogueQuizInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalODialogueQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueQuizInput(ctx, tmp)
	}

	var zeroVal *model.DialogueQuizInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dictionary_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_dictionary_argsLanguage(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["language"] = arg0
	arg1, err := ec.field_Query_dictionary_argsMode(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["mode"] = arg1
	arg2, err := ec.field_Query_dictionary_argsSearchInText(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["searchInText"] = arg2
	arg3, err := ec.field_Query_dictionary_argsWord(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["word"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_dictionary_argsLanguage(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
	if tmp, ok := rawArgs["language"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dictionary_argsMode(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
	if tmp, ok := rawArgs["mode"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dictionary_argsSearchInText(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("searchInText"))
	if tmp, ok := rawArgs["searchInText"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_dictionary_argsWord(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("word"))
	if tmp, ok := rawArgs["word"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_grammarAnswer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_grammarAnswer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_grammarAnswer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.GrammarAnswerInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOGrammarAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarAnswerInput(ctx, tmp)
	}

	var zeroVal *model.GrammarAnswerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_grammarQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_grammarQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_grammarQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.GrammarQuizInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOGrammarQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizInput(ctx, tmp)
	}

	var zeroVal *model.GrammarQuizInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_grammar_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_grammar_argsWord(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["word"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_grammar_argsWord(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("word"))
	if tmp, ok := rawArgs["word"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_journeyQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_journeyQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_journeyQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.JourneyQuizInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOJourneyQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyQuizInput(ctx, tmp)
	}

	var zeroVal *model.JourneyQuizInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_mediaAnswer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_mediaAnswer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_mediaAnswer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MediaAnswerInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOMediaAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaAnswerInput(ctx, tmp)
	}

	var zeroVal *model.MediaAnswerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_mediaQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_mediaQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_mediaQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MediaQuizInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOMediaQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaQuizInput(ctx, tmp)
	}

	var zeroVal *model.MediaQuizInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_multipleChoiceAnswer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_multipleChoiceAnswer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_multipleChoiceAnswer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MultipleChoiceAnswerInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOMultipleChoiceAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleChoiceAnswerInput(ctx, tmp)
	}

	var zeroVal *model.MultipleChoiceAnswerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query_multipleChoiceQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_multipleChoiceQuiz_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_multipleChoiceQuiz_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.MultipleQuizInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOMultipleQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleQuizInput(ctx, tmp)
	}

	var zeroVal *model.MultipleQuizInput
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AggregateResult_themes(ctx context.Context, field graphql.CollectedField, obj *model.AggregateResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregateResult_themes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Themes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Themes)
	fc.Result = res
	return ec.marshalOThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregateResult_themes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregateResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Themes_name(ctx, field)
			case "segments":
				return ec.fieldContext_Themes_segments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Themes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregatedHealthResponse_healthy(ctx context.Context, field graphql.CollectedField, obj *model.AggregatedHealthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregatedHealthResponse_healthy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregatedHealthResponse_healthy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregatedHealthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregatedHealthResponse_time(ctx context.Context, field graphql.CollectedField, obj *model.AggregatedHealthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregatedHealthResponse_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregatedHealthResponse_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregatedHealthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregatedHealthResponse_version(ctx context.Context, field graphql.CollectedField, obj *model.AggregatedHealthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregatedHealthResponse_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregatedHealthResponse_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregatedHealthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregatedHealthResponse_services(ctx context.Context, field graphql.CollectedField, obj *model.AggregatedHealthResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregatedHealthResponse_services(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ServiceHealth)
	fc.Result = res
	return ec.marshalOServiceHealth2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐServiceHealth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregatedHealthResponse_services(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregatedHealthResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ServiceHealth_name(ctx, field)
			case "healthy":
				return ec.fieldContext_ServiceHealth_healthy(ctx, field)
			case "version":
				return ec.fieldContext_ServiceHealth_version(ctx, field)
			case "databaseInfo":
				return ec.fieldContext_ServiceHealth_databaseInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceHealth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregatedOptions_themes(ctx context.Context, field graphql.CollectedField, obj *model.AggregatedOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregatedOptions_themes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Themes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Theme)
	fc.Result = res
	return ec.marshalOTheme2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTheme(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregatedOptions_themes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregatedOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Theme_name(ctx, field)
			case "segments":
				return ec.fieldContext_Theme_segments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Theme", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AggregationResult_authors(ctx context.Context, field graphql.CollectedField, obj *model.AggregationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AggregationResult_authors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ESAuthor)
	fc.Result = res
	return ec.marshalOESAuthor2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AggregationResult_authors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AggregationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "books":
				return ec.fieldContext_ESAuthor_books(ctx, field)
			case "key":
				return ec.fieldContext_ESAuthor_key(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ESAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeResult_author(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeResult_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeResult_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeResult_book(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeResult_book(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Book, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeResult_book(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeResult_reference(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeResult_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeResult_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeResult_referenceLink(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeResult_referenceLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeResult_referenceLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeResult_text(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeResult_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Rhema)
	fc.Result = res
	return ec.marshalORhema2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐRhema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeResult_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_Rhema_greek(ctx, field)
			case "section":
				return ec.fieldContext_Rhema_section(ctx, field)
			case "translations":
				return ec.fieldContext_Rhema_translations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rhema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeTextResponse_conjugations(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeTextResponse_conjugations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conjugations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConjugationResponse)
	fc.Result = res
	return ec.marshalOConjugationResponse2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐConjugationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeTextResponse_conjugations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "rule":
				return ec.fieldContext_ConjugationResponse_rule(ctx, field)
			case "word":
				return ec.fieldContext_ConjugationResponse_word(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConjugationResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeTextResponse_texts(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeTextResponse_texts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Texts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnalyzeResult)
	fc.Result = res
	return ec.marshalOAnalyzeResult2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeTextResponse_texts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_AnalyzeResult_author(ctx, field)
			case "book":
				return ec.fieldContext_AnalyzeResult_book(ctx, field)
			case "reference":
				return ec.fieldContext_AnalyzeResult_reference(ctx, field)
			case "referenceLink":
				return ec.fieldContext_AnalyzeResult_referenceLink(ctx, field)
			case "text":
				return ec.fieldContext_AnalyzeResult_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyzeResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyzeTextResponse_rootword(ctx context.Context, field graphql.CollectedField, obj *model.AnalyzeTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnalyzeTextResponse_rootword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rootword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnalyzeTextResponse_rootword(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyzeTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerSection_answerSentence(ctx context.Context, field graphql.CollectedField, obj *model.AnswerSection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerSection_answerSentence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerSentence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerSection_answerSentence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerSection_levenshteinPercentage(ctx context.Context, field graphql.CollectedField, obj *model.AnswerSection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerSection_levenshteinPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LevenshteinPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerSection_levenshteinPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerSection_quizSentence(ctx context.Context, field graphql.CollectedField, obj *model.AnswerSection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerSection_quizSentence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizSentence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerSection_quizSentence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerSection_section(ctx context.Context, field graphql.CollectedField, obj *model.AnswerSection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerSection_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerSection_section(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedAnswerResponse_correct(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedAnswerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedAnswerResponse_correct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Correct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedAnswerResponse_correct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedAnswerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedAnswerResponse_quizWord(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedAnswerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedAnswerResponse_quizWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedAnswerResponse_quizWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedAnswerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedAnswerResponse_wordsInText(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedAnswerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedAnswerResponse_wordsInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WordsInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedAnswerResponse_wordsInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedAnswerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedAnswerResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedAnswerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedAnswerResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedAnswerResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedAnswerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedAnswerResponse_finished(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedAnswerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedAnswerResponse_finished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedAnswerResponse_finished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedAnswerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedOptions_quizWord(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedOptions_quizWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedOptions_quizWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedQuiz_quizItem(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedQuiz_quizItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedQuiz_quizItem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedQuiz_numberOfItems(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedQuiz_numberOfItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedQuiz_numberOfItems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedQuiz_options(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedQuiz_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AuthorBasedOptions)
	fc.Result = res
	return ec.marshalOAuthorBasedOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedQuiz_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "quizWord":
				return ec.fieldContext_AuthorBasedOptions_quizWord(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_fullSentence(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_fullSentence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullSentence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_fullSentence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_translation(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_reference(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_quiz(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_quiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quiz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthorBasedQuiz)
	fc.Result = res
	return ec.marshalOAuthorBasedQuiz2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedQuiz(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_quiz(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "quizItem":
				return ec.fieldContext_AuthorBasedQuiz_quizItem(ctx, field)
			case "numberOfItems":
				return ec.fieldContext_AuthorBasedQuiz_numberOfItems(ctx, field)
			case "options":
				return ec.fieldContext_AuthorBasedQuiz_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedQuiz", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_grammarQuiz(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_grammarQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrammarQuiz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GrammarQuizAdded)
	fc.Result = res
	return ec.marshalOGrammarQuizAdded2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizAdded(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_grammarQuiz(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correctAnswer":
				return ec.fieldContext_GrammarQuizAdded_correctAnswer(ctx, field)
			case "wordInText":
				return ec.fieldContext_GrammarQuizAdded_wordInText(ctx, field)
			case "extraInformation":
				return ec.fieldContext_GrammarQuizAdded_extraInformation(ctx, field)
			case "options":
				return ec.fieldContext_GrammarQuizAdded_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarQuizAdded", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedWordForm_dictionaryForm(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedWordForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedWordForm_dictionaryForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedWordForm_dictionaryForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedWordForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedWordForm_wordsInText(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedWordForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedWordForm_wordsInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WordsInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedWordForm_wordsInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedWordForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorBasedWordFormsResponse_forms(ctx context.Context, field graphql.CollectedField, obj *model.AuthorBasedWordFormsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorBasedWordFormsResponse_forms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Forms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AuthorBasedWordForm)
	fc.Result = res
	return ec.marshalOAuthorBasedWordForm2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorBasedWordFormsResponse_forms(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorBasedWordFormsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dictionaryForm":
				return ec.fieldContext_AuthorBasedWordForm_dictionaryForm(ctx, field)
			case "wordsInText":
				return ec.fieldContext_AuthorBasedWordForm_wordsInText(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedWordForm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckTextResponse_averageLevenshteinPercentage(ctx context.Context, field graphql.CollectedField, obj *model.CheckTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckTextResponse_averageLevenshteinPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageLevenshteinPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckTextResponse_averageLevenshteinPercentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckTextResponse_possibleTypos(ctx context.Context, field graphql.CollectedField, obj *model.CheckTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckTextResponse_possibleTypos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Typo)
	fc.Result = res
	return ec.marshalOTypo2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTypo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckTextResponse_possibleTypos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "provided":
				return ec.fieldContext_Typo_provided(ctx, field)
			case "source":
				return ec.fieldContext_Typo_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Typo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CheckTextResponse_sections(ctx context.Context, field graphql.CollectedField, obj *model.CheckTextResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CheckTextResponse_sections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AnswerSection)
	fc.Result = res
	return ec.marshalOAnswerSection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnswerSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CheckTextResponse_sections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CheckTextResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "answerSentence":
				return ec.fieldContext_AnswerSection_answerSentence(ctx, field)
			case "levenshteinPercentage":
				return ec.fieldContext_AnswerSection_levenshteinPercentage(ctx, field)
			case "quizSentence":
				return ec.fieldContext_AnswerSection_quizSentence(ctx, field)
			case "section":
				return ec.fieldContext_AnswerSection_section(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnswerSection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_correct(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_correct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Correct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_correct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_foundInText(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_foundInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoundInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyzeTextResponse)
	fc.Result = res
	return ec.marshalOAnalyzeTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeTextResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_foundInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "conjugations":
				return ec.fieldContext_AnalyzeTextResponse_conjugations(ctx, field)
			case "texts":
				return ec.fieldContext_AnalyzeTextResponse_texts(ctx, field)
			case "rootword":
				return ec.fieldContext_AnalyzeTextResponse_rootword(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyzeTextResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_quizWord(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_quizWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_quizWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_similarWords(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_similarWords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimilarWords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Hit)
	fc.Result = res
	return ec.marshalOHit2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_similarWords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dutch":
				return ec.fieldContext_Hit_dutch(ctx, field)
			case "english":
				return ec.fieldContext_Hit_english(ctx, field)
			case "greek":
				return ec.fieldContext_Hit_greek(ctx, field)
			case "linkedWord":
				return ec.fieldContext_Hit_linkedWord(ctx, field)
			case "original":
				return ec.fieldContext_Hit_original(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Hit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComprehensiveResponse_finished(ctx context.Context, field graphql.CollectedField, obj *model.ComprehensiveResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComprehensiveResponse_finished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComprehensiveResponse_finished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComprehensiveResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConjugationResponse_rule(ctx context.Context, field graphql.CollectedField, obj *model.ConjugationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConjugationResponse_rule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConjugationResponse_rule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConjugationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConjugationResponse_word(ctx context.Context, field graphql.CollectedField, obj *model.ConjugationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConjugationResponse_word(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Word, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConjugationResponse_word(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConjugationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_x(ctx context.Context, field graphql.CollectedField, obj *model.Coordinates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coordinates_x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.X, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coordinates_x(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_y(ctx context.Context, field graphql.CollectedField, obj *model.Coordinates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coordinates_y(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Y, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coordinates_y(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Database_clusterName(ctx context.Context, field graphql.CollectedField, obj *model.Database) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Database_clusterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Database_clusterName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Database",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Database_healthy(ctx context.Context, field graphql.CollectedField, obj *model.Database) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Database_healthy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Database_healthy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Database",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Database_serverName(ctx context.Context, field graphql.CollectedField, obj *model.Database) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Database_serverName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Database_serverName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Database",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Database_serverVersion(ctx context.Context, field graphql.CollectedField, obj *model.Database) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Database_serverVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Database_serverVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Database",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseInfo_healthy(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseInfo_healthy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseInfo_healthy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseInfo_clusterName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseInfo_clusterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseInfo_clusterName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseInfo_serverName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseInfo_serverName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseInfo_serverName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseInfo_serverVersion(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseInfo_serverVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseInfo_serverVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeclensionTranslationResult_results(ctx context.Context, field graphql.CollectedField, obj *model.DeclensionTranslationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeclensionTranslationResult_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeclensionTranslationResult_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeclensionTranslationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "rootWord":
				return ec.fieldContext_Result_rootWord(ctx, field)
			case "rule":
				return ec.fieldContext_Result_rule(ctx, field)
			case "translations":
				return ec.fieldContext_Result_translations(ctx, field)
			case "word":
				return ec.fieldContext_Result_word(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dialogue_introduction(ctx context.Context, field graphql.CollectedField, obj *model.Dialogue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dialogue_introduction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Introduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dialogue_introduction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dialogue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dialogue_speakers(ctx context.Context, field graphql.CollectedField, obj *model.Dialogue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dialogue_speakers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speakers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Speaker)
	fc.Result = res
	return ec.marshalOSpeaker2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSpeaker(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dialogue_speakers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dialogue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Speaker_name(ctx, field)
			case "shorthand":
				return ec.fieldContext_Speaker_shorthand(ctx, field)
			case "translation":
				return ec.fieldContext_Speaker_translation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Speaker", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dialogue_section(ctx context.Context, field graphql.CollectedField, obj *model.Dialogue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dialogue_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dialogue_section(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dialogue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dialogue_linkToPerseus(ctx context.Context, field graphql.CollectedField, obj *model.Dialogue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dialogue_linkToPerseus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkToPerseus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dialogue_linkToPerseus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dialogue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueAnswer_percentage(ctx context.Context, field graphql.CollectedField, obj *model.DialogueAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueAnswer_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueAnswer_percentage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueAnswer_input(ctx context.Context, field graphql.CollectedField, obj *model.DialogueAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueAnswer_input(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Input, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DialogueContent)
	fc.Result = res
	return ec.marshalODialogueContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueAnswer_input(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "translation":
				return ec.fieldContext_DialogueContent_translation(ctx, field)
			case "greek":
				return ec.fieldContext_DialogueContent_greek(ctx, field)
			case "place":
				return ec.fieldContext_DialogueContent_place(ctx, field)
			case "speaker":
				return ec.fieldContext_DialogueContent_speaker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueAnswer_answer(ctx context.Context, field graphql.CollectedField, obj *model.DialogueAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueAnswer_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DialogueContent)
	fc.Result = res
	return ec.marshalODialogueContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueAnswer_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "translation":
				return ec.fieldContext_DialogueContent_translation(ctx, field)
			case "greek":
				return ec.fieldContext_DialogueContent_greek(ctx, field)
			case "place":
				return ec.fieldContext_DialogueContent_place(ctx, field)
			case "speaker":
				return ec.fieldContext_DialogueContent_speaker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueAnswer_wronglyPlaced(ctx context.Context, field graphql.CollectedField, obj *model.DialogueAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueAnswer_wronglyPlaced(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WronglyPlaced, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DialogueCorrection)
	fc.Result = res
	return ec.marshalODialogueCorrection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueCorrection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueAnswer_wronglyPlaced(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "translation":
				return ec.fieldContext_DialogueCorrection_translation(ctx, field)
			case "greek":
				return ec.fieldContext_DialogueCorrection_greek(ctx, field)
			case "place":
				return ec.fieldContext_DialogueCorrection_place(ctx, field)
			case "speaker":
				return ec.fieldContext_DialogueCorrection_speaker(ctx, field)
			case "correctPlace":
				return ec.fieldContext_DialogueCorrection_correctPlace(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueCorrection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueContent_translation(ctx context.Context, field graphql.CollectedField, obj *model.DialogueContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueContent_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueContent_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueContent_greek(ctx context.Context, field graphql.CollectedField, obj *model.DialogueContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueContent_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueContent_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueContent_place(ctx context.Context, field graphql.CollectedField, obj *model.DialogueContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueContent_place(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Place, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueContent_place(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueContent_speaker(ctx context.Context, field graphql.CollectedField, obj *model.DialogueContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueContent_speaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speaker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueContent_speaker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueCorrection_translation(ctx context.Context, field graphql.CollectedField, obj *model.DialogueCorrection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueCorrection_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueCorrection_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueCorrection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueCorrection_greek(ctx context.Context, field graphql.CollectedField, obj *model.DialogueCorrection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueCorrection_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueCorrection_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueCorrection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueCorrection_place(ctx context.Context, field graphql.CollectedField, obj *model.DialogueCorrection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueCorrection_place(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Place, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueCorrection_place(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueCorrection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueCorrection_speaker(ctx context.Context, field graphql.CollectedField, obj *model.DialogueCorrection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueCorrection_speaker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speaker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueCorrection_speaker(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueCorrection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueCorrection_correctPlace(ctx context.Context, field graphql.CollectedField, obj *model.DialogueCorrection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueCorrection_correctPlace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectPlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueCorrection_correctPlace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueCorrection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_quizMetadata(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_quizMetadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizMetadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.QuizMetadata)
	fc.Result = res
	return ec.marshalOQuizMetadata2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_quizMetadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_QuizMetadata_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizMetadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_theme(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_theme(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_theme(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_set(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_set(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Set, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_set(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_segment(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_segment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_segment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_reference(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_dialogue(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_dialogue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dialogue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dialogue)
	fc.Result = res
	return ec.marshalODialogue2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_dialogue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "introduction":
				return ec.fieldContext_Dialogue_introduction(ctx, field)
			case "speakers":
				return ec.fieldContext_Dialogue_speakers(ctx, field)
			case "section":
				return ec.fieldContext_Dialogue_section(ctx, field)
			case "linkToPerseus":
				return ec.fieldContext_Dialogue_linkToPerseus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Dialogue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DialogueQuizResponse_content(ctx context.Context, field graphql.CollectedField, obj *model.DialogueQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DialogueQuizResponse_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DialogueContent)
	fc.Result = res
	return ec.marshalODialogueContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DialogueQuizResponse_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DialogueQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "translation":
				return ec.fieldContext_DialogueContent_translation(ctx, field)
			case "greek":
				return ec.fieldContext_DialogueContent_greek(ctx, field)
			case "place":
				return ec.fieldContext_DialogueContent_place(ctx, field)
			case "speaker":
				return ec.fieldContext_DialogueContent_speaker(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESAuthor_books(ctx context.Context, field graphql.CollectedField, obj *model.ESAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESAuthor_books(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Books, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ESBook)
	fc.Result = res
	return ec.marshalOESBook2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESBook(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESAuthor_books(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_ESBook_key(ctx, field)
			case "references":
				return ec.fieldContext_ESBook_references(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ESBook", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESAuthor_key(ctx context.Context, field graphql.CollectedField, obj *model.ESAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESAuthor_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESAuthor_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESBook_key(ctx context.Context, field graphql.CollectedField, obj *model.ESBook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESBook_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESBook_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESBook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ESBook_references(ctx context.Context, field graphql.CollectedField, obj *model.ESBook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ESBook_references(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.References, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ESBook_references(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ESBook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Reference_key(ctx, field)
			case "sections":
				return ec.fieldContext_Reference_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExtendedDictionary_hits(ctx context.Context, field graphql.CollectedField, obj *model.ExtendedDictionary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExtendedDictionary_hits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ExtendedDictionaryEntry)
	fc.Result = res
	return ec.marshalOExtendedDictionaryEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionaryEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExtendedDictionary_hits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExtendedDictionary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "foundInText":
				return ec.fieldContext_ExtendedDictionaryEntry_foundInText(ctx, field)
			case "hit":
				return ec.fieldContext_ExtendedDictionaryEntry_hit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExtendedDictionaryEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExtendedDictionaryEntry_foundInText(ctx context.Context, field graphql.CollectedField, obj *model.ExtendedDictionaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExtendedDictionaryEntry_foundInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoundInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyzeTextResponse)
	fc.Result = res
	return ec.marshalOAnalyzeTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeTextResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExtendedDictionaryEntry_foundInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExtendedDictionaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "conjugations":
				return ec.fieldContext_AnalyzeTextResponse_conjugations(ctx, field)
			case "texts":
				return ec.fieldContext_AnalyzeTextResponse_texts(ctx, field)
			case "rootword":
				return ec.fieldContext_AnalyzeTextResponse_rootword(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyzeTextResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExtendedDictionaryEntry_hit(ctx context.Context, field graphql.CollectedField, obj *model.ExtendedDictionaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExtendedDictionaryEntry_hit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Hit)
	fc.Result = res
	return ec.marshalOHit2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExtendedDictionaryEntry_hit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExtendedDictionaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dutch":
				return ec.fieldContext_Hit_dutch(ctx, field)
			case "english":
				return ec.fieldContext_Hit_english(ctx, field)
			case "greek":
				return ec.fieldContext_Hit_greek(ctx, field)
			case "linkedWord":
				return ec.fieldContext_Hit_linkedWord(ctx, field)
			case "original":
				return ec.fieldContext_Hit_original(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Hit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FinalTranslationQuiz_instruction(ctx context.Context, field graphql.CollectedField, obj *model.FinalTranslationQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FinalTranslationQuiz_instruction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FinalTranslationQuiz_instruction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FinalTranslationQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FinalTranslationQuiz_options(ctx context.Context, field graphql.CollectedField, obj *model.FinalTranslationQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FinalTranslationQuiz_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FinalTranslationQuiz_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FinalTranslationQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FinalTranslationQuiz_answer(ctx context.Context, field graphql.CollectedField, obj *model.FinalTranslationQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FinalTranslationQuiz_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FinalTranslationQuiz_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FinalTranslationQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_correct(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_correct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Correct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_correct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_quizWord(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_quizWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_quizWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_progress(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_similarWords(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_similarWords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimilarWords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Hit)
	fc.Result = res
	return ec.marshalOHit2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_similarWords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dutch":
				return ec.fieldContext_Hit_dutch(ctx, field)
			case "english":
				return ec.fieldContext_Hit_english(ctx, field)
			case "greek":
				return ec.fieldContext_Hit_greek(ctx, field)
			case "linkedWord":
				return ec.fieldContext_Hit_linkedWord(ctx, field)
			case "original":
				return ec.fieldContext_Hit_original(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Hit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_foundInText(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_foundInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoundInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyzeTextResponse)
	fc.Result = res
	return ec.marshalOAnalyzeTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeTextResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_foundInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "conjugations":
				return ec.fieldContext_AnalyzeTextResponse_conjugations(ctx, field)
			case "texts":
				return ec.fieldContext_AnalyzeTextResponse_texts(ctx, field)
			case "rootword":
				return ec.fieldContext_AnalyzeTextResponse_rootword(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyzeTextResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarAnswer_finished(ctx context.Context, field graphql.CollectedField, obj *model.GrammarAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarAnswer_finished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarAnswer_finished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarOption_option(ctx context.Context, field graphql.CollectedField, obj *model.GrammarOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarOption_option(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Option, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarOption_option(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarOptions_themes(ctx context.Context, field graphql.CollectedField, obj *model.GrammarOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarOptions_themes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Themes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GrammarThemes)
	fc.Result = res
	return ec.marshalOGrammarThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarThemes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarOptions_themes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_GrammarThemes_name(ctx, field)
			case "segments":
				return ec.fieldContext_GrammarThemes_segments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarThemes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizAdded_correctAnswer(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizAdded) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizAdded_correctAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizAdded_correctAnswer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizAdded",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizAdded_wordInText(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizAdded) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizAdded_wordInText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WordInText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizAdded_wordInText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizAdded",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizAdded_extraInformation(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizAdded) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizAdded_extraInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizAdded_extraInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizAdded",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizAdded_options(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizAdded) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizAdded_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AuthorBasedOptions)
	fc.Result = res
	return ec.marshalOAuthorBasedOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizAdded_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizAdded",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "quizWord":
				return ec.fieldContext_AuthorBasedOptions_quizWord(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_quizItem(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_quizItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_quizItem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_dictionaryForm(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_dictionaryForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_dictionaryForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_stem(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_stem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_stem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_translation(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_numberOfItems(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_numberOfItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_numberOfItems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_description(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_difficulty(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_difficulty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Difficulty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_difficulty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_contractionRule(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_contractionRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractionRule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_contractionRule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_options(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GrammarOption)
	fc.Result = res
	return ec.marshalOGrammarOption2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "option":
				return ec.fieldContext_GrammarOption_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarQuizResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.GrammarQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarQuizResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarQuizResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarSegment_name(ctx context.Context, field graphql.CollectedField, obj *model.GrammarSegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarSegment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarSegment_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarSegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarSegment_difficulty(ctx context.Context, field graphql.CollectedField, obj *model.GrammarSegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarSegment_difficulty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Difficulty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarSegment_difficulty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarSegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarSegment_maxSet(ctx context.Context, field graphql.CollectedField, obj *model.GrammarSegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarSegment_maxSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarSegment_maxSet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarSegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarThemes_name(ctx context.Context, field graphql.CollectedField, obj *model.GrammarThemes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarThemes_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarThemes_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarThemes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GrammarThemes_segments(ctx context.Context, field graphql.CollectedField, obj *model.GrammarThemes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GrammarThemes_segments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GrammarSegment)
	fc.Result = res
	return ec.marshalOGrammarSegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarSegment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GrammarThemes_segments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GrammarThemes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_GrammarSegment_name(ctx, field)
			case "difficulty":
				return ec.fieldContext_GrammarSegment_difficulty(ctx, field)
			case "maxSet":
				return ec.fieldContext_GrammarSegment_maxSet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarSegment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Health_database(ctx context.Context, field graphql.CollectedField, obj *model.Health) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Health_database(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Database, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Database)
	fc.Result = res
	return ec.marshalODatabase2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDatabase(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Health_database(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Health",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clusterName":
				return ec.fieldContext_Database_clusterName(ctx, field)
			case "healthy":
				return ec.fieldContext_Database_healthy(ctx, field)
			case "serverName":
				return ec.fieldContext_Database_serverName(ctx, field)
			case "serverVersion":
				return ec.fieldContext_Database_serverVersion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Database", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Health_healthy(ctx context.Context, field graphql.CollectedField, obj *model.Health) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Health_healthy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Health_healthy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Health",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Health_time(ctx context.Context, field graphql.CollectedField, obj *model.Health) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Health_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Health_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Health",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Hit_dutch(ctx context.Context, field graphql.CollectedField, obj *model.Hit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Hit_dutch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dutch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Hit_dutch(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Hit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Hit_english(ctx context.Context, field graphql.CollectedField, obj *model.Hit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Hit_english(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.English, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Hit_english(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Hit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Hit_greek(ctx context.Context, field graphql.CollectedField, obj *model.Hit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Hit_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Hit_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Hit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Hit_linkedWord(ctx context.Context, field graphql.CollectedField, obj *model.Hit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Hit_linkedWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Hit_linkedWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Hit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Hit_original(ctx context.Context, field graphql.CollectedField, obj *model.Hit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Hit_original(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Original, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Hit_original(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Hit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneyOptions_themes(ctx context.Context, field graphql.CollectedField, obj *model.JourneyOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneyOptions_themes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Themes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JourneyThemes)
	fc.Result = res
	return ec.marshalOJourneyThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyThemes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneyOptions_themes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneyOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_JourneyThemes_name(ctx, field)
			case "segments":
				return ec.fieldContext_JourneyThemes_segments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JourneyThemes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegment_name(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegment_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegment_number(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegment_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegment_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegment_location(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegment_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegment_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegment_coordinates(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegment_coordinates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Coordinates)
	fc.Result = res
	return ec.marshalOCoordinates2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCoordinates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegment_coordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "x":
				return ec.fieldContext_Coordinates_x(ctx, field)
			case "y":
				return ec.fieldContext_Coordinates_y(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coordinates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_theme(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_theme(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_theme(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_segment(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_segment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_segment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_number(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalNInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_sentence(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_sentence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sentence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_sentence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_translation(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_contextNote(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_contextNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_contextNote(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_intro(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_intro(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Intro, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.QuizIntro)
	fc.Result = res
	return ec.marshalOQuizIntro2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizIntro(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_intro(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_QuizIntro_author(ctx, field)
			case "work":
				return ec.fieldContext_QuizIntro_work(ctx, field)
			case "background":
				return ec.fieldContext_QuizIntro_background(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizIntro", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneySegmentQuiz_quiz(ctx context.Context, field graphql.CollectedField, obj *model.JourneySegmentQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneySegmentQuiz_quiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quiz, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.QuizSection)
	fc.Result = res
	return ec.marshalNQuizSection2ᚕgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizSectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneySegmentQuiz_quiz(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneySegmentQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuizSection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneyThemes_name(ctx context.Context, field graphql.CollectedField, obj *model.JourneyThemes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneyThemes_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneyThemes_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneyThemes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JourneyThemes_segments(ctx context.Context, field graphql.CollectedField, obj *model.JourneyThemes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JourneyThemes_segments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JourneySegment)
	fc.Result = res
	return ec.marshalOJourneySegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JourneyThemes_segments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JourneyThemes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_JourneySegment_name(ctx, field)
			case "number":
				return ec.fieldContext_JourneySegment_number(ctx, field)
			case "location":
				return ec.fieldContext_JourneySegment_location(ctx, field)
			case "coordinates":
				return ec.fieldContext_JourneySegment_coordinates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JourneySegment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchQuiz_instruction(ctx context.Context, field graphql.CollectedField, obj *model.MatchQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchQuiz_instruction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchQuiz_instruction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchQuiz_pairs(ctx context.Context, field graphql.CollectedField, obj *model.MatchQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchQuiz_pairs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pairs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.QuizPair)
	fc.Result = res
	return ec.marshalNQuizPair2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizPairᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchQuiz_pairs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_QuizPair_greek(ctx, field)
			case "answer":
				return ec.fieldContext_QuizPair_answer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizPair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaOptions_audioUrl(ctx context.Context, field graphql.CollectedField, obj *model.MediaOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaOptions_audioUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudioURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaOptions_audioUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaOptions_imageUrl(ctx context.Context, field graphql.CollectedField, obj *model.MediaOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaOptions_imageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaOptions_imageUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaOptions_option(ctx context.Context, field graphql.CollectedField, obj *model.MediaOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaOptions_option(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Option, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaOptions_option(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaPair_word(ctx context.Context, field graphql.CollectedField, obj *model.MediaPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaPair_word(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Word, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaPair_word(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaPair_answer(ctx context.Context, field graphql.CollectedField, obj *model.MediaPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaPair_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaPair_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuiz_instruction(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuiz_instruction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuiz_instruction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuiz_mediaFiles(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuiz_mediaFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaFiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MediaPair)
	fc.Result = res
	return ec.marshalNMediaPair2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaPairᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuiz_mediaFiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "word":
				return ec.fieldContext_MediaPair_word(ctx, field)
			case "answer":
				return ec.fieldContext_MediaPair_answer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaPair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuizResponse_numberOfItems(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuizResponse_numberOfItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuizResponse_numberOfItems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuizResponse_options(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuizResponse_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MediaOptions)
	fc.Result = res
	return ec.marshalOMediaOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuizResponse_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "audioUrl":
				return ec.fieldContext_MediaOptions_audioUrl(ctx, field)
			case "imageUrl":
				return ec.fieldContext_MediaOptions_imageUrl(ctx, field)
			case "option":
				return ec.fieldContext_MediaOptions_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuizResponse_quizItem(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuizResponse_quizItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuizResponse_quizItem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaQuizResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.MediaQuizResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaQuizResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaQuizResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaQuizResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleChoiceResponse_numberOfItems(ctx context.Context, field graphql.CollectedField, obj *model.MultipleChoiceResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleChoiceResponse_numberOfItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleChoiceResponse_numberOfItems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleChoiceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleChoiceResponse_options(ctx context.Context, field graphql.CollectedField, obj *model.MultipleChoiceResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleChoiceResponse_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Options)
	fc.Result = res
	return ec.marshalOOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleChoiceResponse_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleChoiceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "option":
				return ec.fieldContext_Options_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Options", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleChoiceResponse_quizItem(ctx context.Context, field graphql.CollectedField, obj *model.MultipleChoiceResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleChoiceResponse_quizItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleChoiceResponse_quizItem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleChoiceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleChoiceResponse_progress(ctx context.Context, field graphql.CollectedField, obj *model.MultipleChoiceResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleChoiceResponse_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProgressEntry)
	fc.Result = res
	return ec.marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleChoiceResponse_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleChoiceResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_ProgressEntry_greek(ctx, field)
			case "translation":
				return ec.fieldContext_ProgressEntry_translation(ctx, field)
			case "playCount":
				return ec.fieldContext_ProgressEntry_playCount(ctx, field)
			case "correctCount":
				return ec.fieldContext_ProgressEntry_correctCount(ctx, field)
			case "incorrectCount":
				return ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
			case "lastPlayed":
				return ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgressEntry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleTheme_name(ctx context.Context, field graphql.CollectedField, obj *model.MultipleTheme) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleTheme_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleTheme_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleTheme",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultipleTheme_maxSet(ctx context.Context, field graphql.CollectedField, obj *model.MultipleTheme) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MultipleTheme_maxSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MultipleTheme_maxSet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultipleTheme",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Options_option(ctx context.Context, field graphql.CollectedField, obj *model.Options) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Options_option(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Option, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Options_option(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Options",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_greek(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_translation(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_playCount(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_playCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_playCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_correctCount(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_correctCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_correctCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_incorrectCount(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_incorrectCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncorrectCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_incorrectCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressEntry_lastPlayed(ctx context.Context, field graphql.CollectedField, obj *model.ProgressEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressEntry_lastPlayed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPlayed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressEntry_lastPlayed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_health(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_health(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Health(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AggregatedHealthResponse)
	fc.Result = res
	return ec.marshalOAggregatedHealthResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregatedHealthResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_health(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "healthy":
				return ec.fieldContext_AggregatedHealthResponse_healthy(ctx, field)
			case "time":
				return ec.fieldContext_AggregatedHealthResponse_time(ctx, field)
			case "version":
				return ec.fieldContext_AggregatedHealthResponse_version(ctx, field)
			case "services":
				return ec.fieldContext_AggregatedHealthResponse_services(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AggregatedHealthResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mediaOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MediaOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AggregatedOptions)
	fc.Result = res
	return ec.marshalOAggregatedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregatedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mediaOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_AggregatedOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AggregatedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_multipleChoiceOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_multipleChoiceOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MultipleChoiceOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ThemedOptions)
	fc.Result = res
	return ec.marshalOThemedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_multipleChoiceOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_ThemedOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ThemedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_authorBasedOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authorBasedOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthorBasedOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AggregatedOptions)
	fc.Result = res
	return ec.marshalOAggregatedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregatedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authorBasedOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_AggregatedOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AggregatedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_dialogueOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dialogueOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DialogueOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ThemedOptions)
	fc.Result = res
	return ec.marshalOThemedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemedOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dialogueOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_ThemedOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ThemedOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_grammarOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grammarOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GrammarOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GrammarOptions)
	fc.Result = res
	return ec.marshalOGrammarOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grammarOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_GrammarOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_journeyOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_journeyOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JourneyOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JourneyOptions)
	fc.Result = res
	return ec.marshalOJourneyOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_journeyOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "themes":
				return ec.fieldContext_JourneyOptions_themes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JourneyOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaAnswer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mediaAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MediaAnswer(rctx, fc.Args["input"].(*model.MediaAnswerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComprehensiveResponse)
	fc.Result = res
	return ec.marshalOComprehensiveResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐComprehensiveResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mediaAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correct":
				return ec.fieldContext_ComprehensiveResponse_correct(ctx, field)
			case "foundInText":
				return ec.fieldContext_ComprehensiveResponse_foundInText(ctx, field)
			case "quizWord":
				return ec.fieldContext_ComprehensiveResponse_quizWord(ctx, field)
			case "similarWords":
				return ec.fieldContext_ComprehensiveResponse_similarWords(ctx, field)
			case "progress":
				return ec.fieldContext_ComprehensiveResponse_progress(ctx, field)
			case "finished":
				return ec.fieldContext_ComprehensiveResponse_finished(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComprehensiveResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaAnswer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mediaQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MediaQuiz(rctx, fc.Args["input"].(*model.MediaQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MediaQuizResponse)
	fc.Result = res
	return ec.marshalOMediaQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaQuizResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mediaQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "numberOfItems":
				return ec.fieldContext_MediaQuizResponse_numberOfItems(ctx, field)
			case "options":
				return ec.fieldContext_MediaQuizResponse_options(ctx, field)
			case "quizItem":
				return ec.fieldContext_MediaQuizResponse_quizItem(ctx, field)
			case "progress":
				return ec.fieldContext_MediaQuizResponse_progress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaQuizResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_multipleChoiceAnswer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_multipleChoiceAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MultipleChoiceAnswer(rctx, fc.Args["input"].(*model.MultipleChoiceAnswerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComprehensiveResponse)
	fc.Result = res
	return ec.marshalOComprehensiveResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐComprehensiveResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_multipleChoiceAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correct":
				return ec.fieldContext_ComprehensiveResponse_correct(ctx, field)
			case "foundInText":
				return ec.fieldContext_ComprehensiveResponse_foundInText(ctx, field)
			case "quizWord":
				return ec.fieldContext_ComprehensiveResponse_quizWord(ctx, field)
			case "similarWords":
				return ec.fieldContext_ComprehensiveResponse_similarWords(ctx, field)
			case "progress":
				return ec.fieldContext_ComprehensiveResponse_progress(ctx, field)
			case "finished":
				return ec.fieldContext_ComprehensiveResponse_finished(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComprehensiveResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_multipleChoiceAnswer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_multipleChoiceQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_multipleChoiceQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MultipleChoiceQuiz(rctx, fc.Args["input"].(*model.MultipleQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MultipleChoiceResponse)
	fc.Result = res
	return ec.marshalOMultipleChoiceResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleChoiceResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_multipleChoiceQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "numberOfItems":
				return ec.fieldContext_MultipleChoiceResponse_numberOfItems(ctx, field)
			case "options":
				return ec.fieldContext_MultipleChoiceResponse_options(ctx, field)
			case "quizItem":
				return ec.fieldContext_MultipleChoiceResponse_quizItem(ctx, field)
			case "progress":
				return ec.fieldContext_MultipleChoiceResponse_progress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MultipleChoiceResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_multipleChoiceQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_authorBasedAnswer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authorBasedAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthorBasedAnswer(rctx, fc.Args["input"].(*model.AuthorBasedAnswerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthorBasedAnswerResponse)
	fc.Result = res
	return ec.marshalOAuthorBasedAnswerResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedAnswerResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authorBasedAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correct":
				return ec.fieldContext_AuthorBasedAnswerResponse_correct(ctx, field)
			case "quizWord":
				return ec.fieldContext_AuthorBasedAnswerResponse_quizWord(ctx, field)
			case "wordsInText":
				return ec.fieldContext_AuthorBasedAnswerResponse_wordsInText(ctx, field)
			case "progress":
				return ec.fieldContext_AuthorBasedAnswerResponse_progress(ctx, field)
			case "finished":
				return ec.fieldContext_AuthorBasedAnswerResponse_finished(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedAnswerResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authorBasedAnswer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_authorBasedQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authorBasedQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthorBasedQuiz(rctx, fc.Args["input"].(*model.AuthorBasedInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthorBasedResponse)
	fc.Result = res
	return ec.marshalOAuthorBasedResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authorBasedQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fullSentence":
				return ec.fieldContext_AuthorBasedResponse_fullSentence(ctx, field)
			case "translation":
				return ec.fieldContext_AuthorBasedResponse_translation(ctx, field)
			case "reference":
				return ec.fieldContext_AuthorBasedResponse_reference(ctx, field)
			case "quiz":
				return ec.fieldContext_AuthorBasedResponse_quiz(ctx, field)
			case "grammarQuiz":
				return ec.fieldContext_AuthorBasedResponse_grammarQuiz(ctx, field)
			case "progress":
				return ec.fieldContext_AuthorBasedResponse_progress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authorBasedQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_authorBasedWordForms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authorBasedWordForms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthorBasedWordForms(rctx, fc.Args["input"].(*model.AuthorBasedWordFormsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthorBasedWordFormsResponse)
	fc.Result = res
	return ec.marshalOAuthorBasedWordFormsResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordFormsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authorBasedWordForms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "forms":
				return ec.fieldContext_AuthorBasedWordFormsResponse_forms(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorBasedWordFormsResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authorBasedWordForms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dialogueAnswer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dialogueAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DialogueAnswer(rctx, fc.Args["input"].(*model.DialogueAnswerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DialogueAnswer)
	fc.Result = res
	return ec.marshalODialogueAnswer2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dialogueAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "percentage":
				return ec.fieldContext_DialogueAnswer_percentage(ctx, field)
			case "input":
				return ec.fieldContext_DialogueAnswer_input(ctx, field)
			case "answer":
				return ec.fieldContext_DialogueAnswer_answer(ctx, field)
			case "wronglyPlaced":
				return ec.fieldContext_DialogueAnswer_wronglyPlaced(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueAnswer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dialogueAnswer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dialogueQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dialogueQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DialogueQuiz(rctx, fc.Args["input"].(*model.DialogueQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DialogueQuizResponse)
	fc.Result = res
	return ec.marshalODialogueQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueQuizResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dialogueQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "quizMetadata":
				return ec.fieldContext_DialogueQuizResponse_quizMetadata(ctx, field)
			case "theme":
				return ec.fieldContext_DialogueQuizResponse_theme(ctx, field)
			case "set":
				return ec.fieldContext_DialogueQuizResponse_set(ctx, field)
			case "segment":
				return ec.fieldContext_DialogueQuizResponse_segment(ctx, field)
			case "reference":
				return ec.fieldContext_DialogueQuizResponse_reference(ctx, field)
			case "dialogue":
				return ec.fieldContext_DialogueQuizResponse_dialogue(ctx, field)
			case "content":
				return ec.fieldContext_DialogueQuizResponse_content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DialogueQuizResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dialogueQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_grammarQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grammarQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GrammarQuiz(rctx, fc.Args["input"].(*model.GrammarQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GrammarQuizResponse)
	fc.Result = res
	return ec.marshalOGrammarQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grammarQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "quizItem":
				return ec.fieldContext_GrammarQuizResponse_quizItem(ctx, field)
			case "dictionaryForm":
				return ec.fieldContext_GrammarQuizResponse_dictionaryForm(ctx, field)
			case "stem":
				return ec.fieldContext_GrammarQuizResponse_stem(ctx, field)
			case "translation":
				return ec.fieldContext_GrammarQuizResponse_translation(ctx, field)
			case "numberOfItems":
				return ec.fieldContext_GrammarQuizResponse_numberOfItems(ctx, field)
			case "description":
				return ec.fieldContext_GrammarQuizResponse_description(ctx, field)
			case "difficulty":
				return ec.fieldContext_GrammarQuizResponse_difficulty(ctx, field)
			case "contractionRule":
				return ec.fieldContext_GrammarQuizResponse_contractionRule(ctx, field)
			case "options":
				return ec.fieldContext_GrammarQuizResponse_options(ctx, field)
			case "progress":
				return ec.fieldContext_GrammarQuizResponse_progress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarQuizResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_grammarQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_grammarAnswer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grammarAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GrammarAnswer(rctx, fc.Args["input"].(*model.GrammarAnswerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GrammarAnswer)
	fc.Result = res
	return ec.marshalOGrammarAnswer2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grammarAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correct":
				return ec.fieldContext_GrammarAnswer_correct(ctx, field)
			case "quizWord":
				return ec.fieldContext_GrammarAnswer_quizWord(ctx, field)
			case "progress":
				return ec.fieldContext_GrammarAnswer_progress(ctx, field)
			case "similarWords":
				return ec.fieldContext_GrammarAnswer_similarWords(ctx, field)
			case "foundInText":
				return ec.fieldContext_GrammarAnswer_foundInText(ctx, field)
			case "finished":
				return ec.fieldContext_GrammarAnswer_finished(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GrammarAnswer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_grammarAnswer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_journeyQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_journeyQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JourneyQuiz(rctx, fc.Args["input"].(*model.JourneyQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JourneySegmentQuiz)
	fc.Result = res
	return ec.marshalOJourneySegmentQuiz2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegmentQuiz(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_journeyQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "theme":
				return ec.fieldContext_JourneySegmentQuiz_theme(ctx, field)
			case "segment":
				return ec.fieldContext_JourneySegmentQuiz_segment(ctx, field)
			case "number":
				return ec.fieldContext_JourneySegmentQuiz_number(ctx, field)
			case "sentence":
				return ec.fieldContext_JourneySegmentQuiz_sentence(ctx, field)
			case "translation":
				return ec.fieldContext_JourneySegmentQuiz_translation(ctx, field)
			case "contextNote":
				return ec.fieldContext_JourneySegmentQuiz_contextNote(ctx, field)
			case "intro":
				return ec.fieldContext_JourneySegmentQuiz_intro(ctx, field)
			case "quiz":
				return ec.fieldContext_JourneySegmentQuiz_quiz(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JourneySegmentQuiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_journeyQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_analyze(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_analyze(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Analyze(rctx, fc.Args["rootword"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnalyzeTextResponse)
	fc.Result = res
	return ec.marshalOAnalyzeTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeTextResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_analyze(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "conjugations":
				return ec.fieldContext_AnalyzeTextResponse_conjugations(ctx, field)
			case "texts":
				return ec.fieldContext_AnalyzeTextResponse_texts(ctx, field)
			case "rootword":
				return ec.fieldContext_AnalyzeTextResponse_rootword(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyzeTextResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_analyze_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_check(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_check(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Check(rctx, fc.Args["input"].(*model.CheckTextRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CheckTextResponse)
	fc.Result = res
	return ec.marshalOCheckTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCheckTextResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_check(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "averageLevenshteinPercentage":
				return ec.fieldContext_CheckTextResponse_averageLevenshteinPercentage(ctx, field)
			case "possibleTypos":
				return ec.fieldContext_CheckTextResponse_possibleTypos(ctx, field)
			case "sections":
				return ec.fieldContext_CheckTextResponse_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CheckTextResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_check_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Create(rctx, fc.Args["input"].(*model.CreateTextInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Text)
	fc.Result = res
	return ec.marshalOText2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐText(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_Text_author(ctx, field)
			case "book":
				return ec.fieldContext_Text_book(ctx, field)
			case "perseusTextLink":
				return ec.fieldContext_Text_perseusTextLink(ctx, field)
			case "reference":
				return ec.fieldContext_Text_reference(ctx, field)
			case "rhemai":
				return ec.fieldContext_Text_rhemai(ctx, field)
			case "type":
				return ec.fieldContext_Text_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Text", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dictionary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Dictionary(rctx, fc.Args["language"].(*string), fc.Args["mode"].(*string), fc.Args["searchInText"].(*bool), fc.Args["word"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ExtendedDictionary)
	fc.Result = res
	return ec.marshalOExtendedDictionary2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dictionary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hits":
				return ec.fieldContext_ExtendedDictionary_hits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExtendedDictionary", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dictionary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_grammar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grammar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Grammar(rctx, fc.Args["word"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeclensionTranslationResult)
	fc.Result = res
	return ec.marshalODeclensionTranslationResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDeclensionTranslationResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grammar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_DeclensionTranslationResult_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeclensionTranslationResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_grammar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_status(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Status(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alexandros":
				return ec.fieldContext_Status_alexandros(ctx, field)
			case "dionysios":
				return ec.fieldContext_Status_dionysios(ctx, field)
			case "herodotos":
				return ec.fieldContext_Status_herodotos(ctx, field)
			case "overallHealth":
				return ec.fieldContext_Status_overallHealth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Status", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_textOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_textOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TextOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AggregationResult)
	fc.Result = res
	return ec.marshalOAggregationResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregationResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_textOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authors":
				return ec.fieldContext_AggregationResult_authors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AggregationResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizIntro_author(ctx context.Context, field graphql.CollectedField, obj *model.QuizIntro) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizIntro_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizIntro_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizIntro",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizIntro_work(ctx context.Context, field graphql.CollectedField, obj *model.QuizIntro) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizIntro_work(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Work, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizIntro_work(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizIntro",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizIntro_background(ctx context.Context, field graphql.CollectedField, obj *model.QuizIntro) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizIntro_background(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Background, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizIntro_background(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizIntro",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizMetadata_language(ctx context.Context, field graphql.CollectedField, obj *model.QuizMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizMetadata_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizMetadata_language(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizPair_greek(ctx context.Context, field graphql.CollectedField, obj *model.QuizPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizPair_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizPair_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizPair_answer(ctx context.Context, field graphql.CollectedField, obj *model.QuizPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuizPair_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuizPair_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_key(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_sections(ctx context.Context, field graphql.CollectedField, obj *model.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_sections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Section)
	fc.Result = res
	return ec.marshalOSection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_sections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Section_key(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Section", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Result_rootWord(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Result_rootWord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Result_rootWord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Result_rule(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Result_rule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Result_rule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Result_translations(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Result_translations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Result_translations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Result_word(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Result_word(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Word, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Result_word(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rhema_greek(ctx context.Context, field graphql.CollectedField, obj *model.Rhema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Rhema_greek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Greek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Rhema_greek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rhema",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rhema_section(ctx context.Context, field graphql.CollectedField, obj *model.Rhema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Rhema_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Rhema_section(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rhema",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rhema_translations(ctx context.Context, field graphql.CollectedField, obj *model.Rhema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Rhema_translations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Rhema_translations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rhema",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_key(ctx context.Context, field graphql.CollectedField, obj *model.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Segment_name(ctx context.Context, field graphql.CollectedField, obj *model.Segment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Segment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Segment_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Segment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Segment_maxSet(ctx context.Context, field graphql.CollectedField, obj *model.Segment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Segment_maxSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Segment_maxSet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Segment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Segments_maxSet(ctx context.Context, field graphql.CollectedField, obj *model.Segments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Segments_maxSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Segments_maxSet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Segments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Segments_name(ctx context.Context, field graphql.CollectedField, obj *model.Segments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Segments_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Segments_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Segments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceHealth_name(ctx context.Context, field graphql.CollectedField, obj *model.ServiceHealth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceHealth_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceHealth_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceHealth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceHealth_healthy(ctx context.Context, field graphql.CollectedField, obj *model.ServiceHealth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceHealth_healthy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceHealth_healthy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceHealth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceHealth_version(ctx context.Context, field graphql.CollectedField, obj *model.ServiceHealth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceHealth_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceHealth_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceHealth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceHealth_databaseInfo(ctx context.Context, field graphql.CollectedField, obj *model.ServiceHealth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceHealth_databaseInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatabaseInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DatabaseInfo)
	fc.Result = res
	return ec.marshalODatabaseInfo2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDatabaseInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceHealth_databaseInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceHealth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "healthy":
				return ec.fieldContext_DatabaseInfo_healthy(ctx, field)
			case "clusterName":
				return ec.fieldContext_DatabaseInfo_clusterName(ctx, field)
			case "serverName":
				return ec.fieldContext_DatabaseInfo_serverName(ctx, field)
			case "serverVersion":
				return ec.fieldContext_DatabaseInfo_serverVersion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DatabaseInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Speaker_name(ctx context.Context, field graphql.CollectedField, obj *model.Speaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Speaker_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Speaker_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Speaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Speaker_shorthand(ctx context.Context, field graphql.CollectedField, obj *model.Speaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Speaker_shorthand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shorthand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Speaker_shorthand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Speaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Speaker_translation(ctx context.Context, field graphql.CollectedField, obj *model.Speaker) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Speaker_translation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Speaker_translation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Speaker",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Status_alexandros(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Status_alexandros(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alexandros, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Health)
	fc.Result = res
	return ec.marshalOHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHealth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Status_alexandros(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "database":
				return ec.fieldContext_Health_database(ctx, field)
			case "healthy":
				return ec.fieldContext_Health_healthy(ctx, field)
			case "time":
				return ec.fieldContext_Health_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Health", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Status_dionysios(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Status_dionysios(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dionysios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Health)
	fc.Result = res
	return ec.marshalOHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHealth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Status_dionysios(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "database":
				return ec.fieldContext_Health_database(ctx, field)
			case "healthy":
				return ec.fieldContext_Health_healthy(ctx, field)
			case "time":
				return ec.fieldContext_Health_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Health", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Status_herodotos(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Status_herodotos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Herodotos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Health)
	fc.Result = res
	return ec.marshalOHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHealth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Status_herodotos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "database":
				return ec.fieldContext_Health_database(ctx, field)
			case "healthy":
				return ec.fieldContext_Health_healthy(ctx, field)
			case "time":
				return ec.fieldContext_Health_time(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Health", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Status_overallHealth(ctx context.Context, field graphql.CollectedField, obj *model.Status) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Status_overallHealth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverallHealth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Status_overallHealth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Status",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_title(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_text(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_question(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_question(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_options(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_answer(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StructureQuiz_note(ctx context.Context, field graphql.CollectedField, obj *model.StructureQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StructureQuiz_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StructureQuiz_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StructureQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_author(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_book(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_book(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Book, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_book(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_perseusTextLink(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_perseusTextLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerseusTextLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_perseusTextLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_reference(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_reference(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_rhemai(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_rhemai(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rhemai, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Rhema)
	fc.Result = res
	return ec.marshalORhema2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐRhema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_rhemai(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "greek":
				return ec.fieldContext_Rhema_greek(ctx, field)
			case "section":
				return ec.fieldContext_Rhema_section(ctx, field)
			case "translations":
				return ec.fieldContext_Rhema_translations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rhema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Text_type(ctx context.Context, field graphql.CollectedField, obj *model.Text) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Text_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Text_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Text",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Theme_name(ctx context.Context, field graphql.CollectedField, obj *model.Theme) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Theme_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Theme_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Theme",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Theme_segments(ctx context.Context, field graphql.CollectedField, obj *model.Theme) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Theme_segments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Segment)
	fc.Result = res
	return ec.marshalOSegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Theme_segments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Theme",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Segment_name(ctx, field)
			case "maxSet":
				return ec.fieldContext_Segment_maxSet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Segment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ThemedOptions_themes(ctx context.Context, field graphql.CollectedField, obj *model.ThemedOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ThemedOptions_themes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Themes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MultipleTheme)
	fc.Result = res
	return ec.marshalOMultipleTheme2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleTheme(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ThemedOptions_themes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ThemedOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_MultipleTheme_name(ctx, field)
			case "maxSet":
				return ec.fieldContext_MultipleTheme_maxSet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MultipleTheme", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Themes_name(ctx context.Context, field graphql.CollectedField, obj *model.Themes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Themes_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Themes_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Themes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Themes_segments(ctx context.Context, field graphql.CollectedField, obj *model.Themes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Themes_segments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Segments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Segments)
	fc.Result = res
	return ec.marshalOSegments2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Themes_segments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Themes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxSet":
				return ec.fieldContext_Segments_maxSet(ctx, field)
			case "name":
				return ec.fieldContext_Segments_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Segments", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TriviaQuiz_question(ctx context.Context, field graphql.CollectedField, obj *model.TriviaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TriviaQuiz_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TriviaQuiz_question(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TriviaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TriviaQuiz_options(ctx context.Context, field graphql.CollectedField, obj *model.TriviaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TriviaQuiz_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TriviaQuiz_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TriviaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TriviaQuiz_answer(ctx context.Context, field graphql.CollectedField, obj *model.TriviaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TriviaQuiz_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TriviaQuiz_answer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TriviaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TriviaQuiz_note(ctx context.Context, field graphql.CollectedField, obj *model.TriviaQuiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TriviaQuiz_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TriviaQuiz_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TriviaQuiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Typo_provided(ctx context.Context, field graphql.CollectedField, obj *model.Typo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Typo_provided(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provided, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Typo_provided(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Typo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Typo_source(ctx context.Context, field graphql.CollectedField, obj *model.Typo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Typo_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Typo_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Typo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAuthorBasedAnswerInput(ctx context.Context, obj any) (model.AuthorBasedAnswerInput, error) {
	var it model.AuthorBasedAnswerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"doneAfter", "theme", "set", "segment", "quizWord", "answer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "quizWord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizWord"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuizWord = data
		case "answer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Answer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthorBasedInput(ctx context.Context, obj any) (model.AuthorBasedInput, error) {
	var it model.AuthorBasedInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "segment", "doneAfter", "resetProgress", "archiveProgress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "resetProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResetProgress = data
		case "archiveProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveProgress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthorBasedWordFormsInput(ctx context.Context, obj any) (model.AuthorBasedWordFormsInput, error) {
	var it model.AuthorBasedWordFormsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "segment", "set"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckTextRequestInput(ctx context.Context, obj any) (model.CheckTextRequestInput, error) {
	var it model.CheckTextRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"translations", "author", "book", "reference"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "translations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("translations"))
			data, err := ec.unmarshalOTranslationsInput2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTranslationsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Translations = data
		case "author":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Author = data
		case "book":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Book = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTextInput(ctx context.Context, obj any) (model.CreateTextInput, error) {
	var it model.CreateTextInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"author", "book", "reference", "section"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "author":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Author = data
		case "book":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Book = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "section":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Section = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDialogueAnswerInput(ctx context.Context, obj any) (model.DialogueAnswerInput, error) {
	var it model.DialogueAnswerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalODialogueInputContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueInputContent(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDialogueInputContent(ctx context.Context, obj any) (model.DialogueInputContent, error) {
	var it model.DialogueInputContent
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"translation", "greek", "place", "speaker"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "translation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("translation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Translation = data
		case "greek":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greek"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Greek = data
		case "place":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("place"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Place = data
		case "speaker":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speaker"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Speaker = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDialogueQuizInput(ctx context.Context, obj any) (model.DialogueQuizInput, error) {
	var it model.DialogueQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGrammarAnswerInput(ctx context.Context, obj any) (model.GrammarAnswerInput, error) {
	var it model.GrammarAnswerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "segment", "quizWord", "answer", "comprehensive", "doneAfter", "dictionaryForm"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "quizWord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizWord"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuizWord = data
		case "answer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Answer = data
		case "comprehensive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comprehensive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comprehensive = data
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "dictionaryForm":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionaryForm"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DictionaryForm = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGrammarQuizInput(ctx context.Context, obj any) (model.GrammarQuizInput, error) {
	var it model.GrammarQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "segment", "doneAfter", "resetProgress", "archiveProgress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "resetProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResetProgress = data
		case "archiveProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveProgress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJourneyQuizInput(ctx context.Context, obj any) (model.JourneyQuizInput, error) {
	var it model.JourneyQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "segment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaAnswerInput(ctx context.Context, obj any) (model.MediaAnswerInput, error) {
	var it model.MediaAnswerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "segment", "quizWord", "answer", "comprehensive", "doneAfter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "quizWord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizWord"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuizWord = data
		case "answer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Answer = data
		case "comprehensive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comprehensive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comprehensive = data
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaQuizInput(ctx context.Context, obj any) (model.MediaQuizInput, error) {
	var it model.MediaQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"doneAfter", "theme", "set", "segment", "order", "resetProgress", "archiveProgress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "segment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("segment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Segment = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "resetProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResetProgress = data
		case "archiveProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveProgress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultipleChoiceAnswerInput(ctx context.Context, obj any) (model.MultipleChoiceAnswerInput, error) {
	var it model.MultipleChoiceAnswerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "set", "quizWord", "answer", "comprehensive", "doneAfter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "quizWord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizWord"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuizWord = data
		case "answer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Answer = data
		case "comprehensive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comprehensive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comprehensive = data
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultipleQuizInput(ctx context.Context, obj any) (model.MultipleQuizInput, error) {
	var it model.MultipleQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"doneAfter", "theme", "set", "order", "resetProgress", "archiveProgress"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "doneAfter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("doneAfter"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.DoneAfter = data
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "set":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("set"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Set = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "resetProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResetProgress = data
		case "archiveProgress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveProgress"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveProgress = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTranslationsInput(ctx context.Context, obj any) (model.TranslationsInput, error) {
	var it model.TranslationsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"section", "translation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "section":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Section = data
		case "translation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("translation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Translation = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _QuizSection(ctx context.Context, sel ast.SelectionSet, obj model.QuizSection) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.TriviaQuiz:
		return ec._TriviaQuiz(ctx, sel, &obj)
	case *model.TriviaQuiz:
		if obj == nil {
			return graphql.Null
		}
		return ec._TriviaQuiz(ctx, sel, obj)
	case model.StructureQuiz:
		return ec._StructureQuiz(ctx, sel, &obj)
	case *model.StructureQuiz:
		if obj == nil {
			return graphql.Null
		}
		return ec._StructureQuiz(ctx, sel, obj)
	case model.MediaQuiz:
		return ec._MediaQuiz(ctx, sel, &obj)
	case *model.MediaQuiz:
		if obj == nil {
			return graphql.Null
		}
		return ec._MediaQuiz(ctx, sel, obj)
	case model.MatchQuiz:
		return ec._MatchQuiz(ctx, sel, &obj)
	case *model.MatchQuiz:
		if obj == nil {
			return graphql.Null
		}
		return ec._MatchQuiz(ctx, sel, obj)
	case model.FinalTranslationQuiz:
		return ec._FinalTranslationQuiz(ctx, sel, &obj)
	case *model.FinalTranslationQuiz:
		if obj == nil {
			return graphql.Null
		}
		return ec._FinalTranslationQuiz(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aggregateResultImplementors = []string{"AggregateResult"}

func (ec *executionContext) _AggregateResult(ctx context.Context, sel ast.SelectionSet, obj *model.AggregateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aggregateResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregateResult")
		case "themes":
			out.Values[i] = ec._AggregateResult_themes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var aggregatedHealthResponseImplementors = []string{"AggregatedHealthResponse"}

func (ec *executionContext) _AggregatedHealthResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AggregatedHealthResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aggregatedHealthResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregatedHealthResponse")
		case "healthy":
			out.Values[i] = ec._AggregatedHealthResponse_healthy(ctx, field, obj)
		case "time":
			out.Values[i] = ec._AggregatedHealthResponse_time(ctx, field, obj)
		case "version":
			out.Values[i] = ec._AggregatedHealthResponse_version(ctx, field, obj)
		case "services":
			out.Values[i] = ec._AggregatedHealthResponse_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var aggregatedOptionsImplementors = []string{"AggregatedOptions"}

func (ec *executionContext) _AggregatedOptions(ctx context.Context, sel ast.SelectionSet, obj *model.AggregatedOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aggregatedOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregatedOptions")
		case "themes":
			out.Values[i] = ec._AggregatedOptions_themes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var aggregationResultImplementors = []string{"AggregationResult"}

func (ec *executionContext) _AggregationResult(ctx context.Context, sel ast.SelectionSet, obj *model.AggregationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aggregationResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AggregationResult")
		case "authors":
			out.Values[i] = ec._AggregationResult_authors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var analyzeResultImplementors = []string{"AnalyzeResult"}

func (ec *executionContext) _AnalyzeResult(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyzeResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyzeResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyzeResult")
		case "author":
			out.Values[i] = ec._AnalyzeResult_author(ctx, field, obj)
		case "book":
			out.Values[i] = ec._AnalyzeResult_book(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._AnalyzeResult_reference(ctx, field, obj)
		case "referenceLink":
			out.Values[i] = ec._AnalyzeResult_referenceLink(ctx, field, obj)
		case "text":
			out.Values[i] = ec._AnalyzeResult_text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var analyzeTextResponseImplementors = []string{"AnalyzeTextResponse"}

func (ec *executionContext) _AnalyzeTextResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AnalyzeTextResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyzeTextResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyzeTextResponse")
		case "conjugations":
			out.Values[i] = ec._AnalyzeTextResponse_conjugations(ctx, field, obj)
		case "texts":
			out.Values[i] = ec._AnalyzeTextResponse_texts(ctx, field, obj)
		case "rootword":
			out.Values[i] = ec._AnalyzeTextResponse_rootword(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var answerSectionImplementors = []string{"AnswerSection"}

func (ec *executionContext) _AnswerSection(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerSection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answerSectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnswerSection")
		case "answerSentence":
			out.Values[i] = ec._AnswerSection_answerSentence(ctx, field, obj)
		case "levenshteinPercentage":
			out.Values[i] = ec._AnswerSection_levenshteinPercentage(ctx, field, obj)
		case "quizSentence":
			out.Values[i] = ec._AnswerSection_quizSentence(ctx, field, obj)
		case "section":
			out.Values[i] = ec._AnswerSection_section(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedAnswerResponseImplementors = []string{"AuthorBasedAnswerResponse"}

func (ec *executionContext) _AuthorBasedAnswerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedAnswerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedAnswerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedAnswerResponse")
		case "correct":
			out.Values[i] = ec._AuthorBasedAnswerResponse_correct(ctx, field, obj)
		case "quizWord":
			out.Values[i] = ec._AuthorBasedAnswerResponse_quizWord(ctx, field, obj)
		case "wordsInText":
			out.Values[i] = ec._AuthorBasedAnswerResponse_wordsInText(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._AuthorBasedAnswerResponse_progress(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._AuthorBasedAnswerResponse_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedOptionsImplementors = []string{"AuthorBasedOptions"}

func (ec *executionContext) _AuthorBasedOptions(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedOptions")
		case "quizWord":
			out.Values[i] = ec._AuthorBasedOptions_quizWord(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedQuizImplementors = []string{"AuthorBasedQuiz"}

func (ec *executionContext) _AuthorBasedQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedQuiz")
		case "quizItem":
			out.Values[i] = ec._AuthorBasedQuiz_quizItem(ctx, field, obj)
		case "numberOfItems":
			out.Values[i] = ec._AuthorBasedQuiz_numberOfItems(ctx, field, obj)
		case "options":
			out.Values[i] = ec._AuthorBasedQuiz_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedResponseImplementors = []string{"AuthorBasedResponse"}

func (ec *executionContext) _AuthorBasedResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedResponse")
		case "fullSentence":
			out.Values[i] = ec._AuthorBasedResponse_fullSentence(ctx, field, obj)
		case "translation":
			out.Values[i] = ec._AuthorBasedResponse_translation(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._AuthorBasedResponse_reference(ctx, field, obj)
		case "quiz":
			out.Values[i] = ec._AuthorBasedResponse_quiz(ctx, field, obj)
		case "grammarQuiz":
			out.Values[i] = ec._AuthorBasedResponse_grammarQuiz(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._AuthorBasedResponse_progress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedWordFormImplementors = []string{"AuthorBasedWordForm"}

func (ec *executionContext) _AuthorBasedWordForm(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedWordForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedWordFormImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedWordForm")
		case "dictionaryForm":
			out.Values[i] = ec._AuthorBasedWordForm_dictionaryForm(ctx, field, obj)
		case "wordsInText":
			out.Values[i] = ec._AuthorBasedWordForm_wordsInText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authorBasedWordFormsResponseImplementors = []string{"AuthorBasedWordFormsResponse"}

func (ec *executionContext) _AuthorBasedWordFormsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.AuthorBasedWordFormsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorBasedWordFormsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorBasedWordFormsResponse")
		case "forms":
			out.Values[i] = ec._AuthorBasedWordFormsResponse_forms(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var checkTextResponseImplementors = []string{"CheckTextResponse"}

func (ec *executionContext) _CheckTextResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CheckTextResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkTextResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckTextResponse")
		case "averageLevenshteinPercentage":
			out.Values[i] = ec._CheckTextResponse_averageLevenshteinPercentage(ctx, field, obj)
		case "possibleTypos":
			out.Values[i] = ec._CheckTextResponse_possibleTypos(ctx, field, obj)
		case "sections":
			out.Values[i] = ec._CheckTextResponse_sections(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var comprehensiveResponseImplementors = []string{"ComprehensiveResponse"}

func (ec *executionContext) _ComprehensiveResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ComprehensiveResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, comprehensiveResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComprehensiveResponse")
		case "correct":
			out.Values[i] = ec._ComprehensiveResponse_correct(ctx, field, obj)
		case "foundInText":
			out.Values[i] = ec._ComprehensiveResponse_foundInText(ctx, field, obj)
		case "quizWord":
			out.Values[i] = ec._ComprehensiveResponse_quizWord(ctx, field, obj)
		case "similarWords":
			out.Values[i] = ec._ComprehensiveResponse_similarWords(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._ComprehensiveResponse_progress(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._ComprehensiveResponse_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var conjugationResponseImplementors = []string{"ConjugationResponse"}

func (ec *executionContext) _ConjugationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ConjugationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conjugationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConjugationResponse")
		case "rule":
			out.Values[i] = ec._ConjugationResponse_rule(ctx, field, obj)
		case "word":
			out.Values[i] = ec._ConjugationResponse_word(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var coordinatesImplementors = []string{"Coordinates"}

func (ec *executionContext) _Coordinates(ctx context.Context, sel ast.SelectionSet, obj *model.Coordinates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coordinatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Coordinates")
		case "x":
			out.Values[i] = ec._Coordinates_x(ctx, field, obj)
		case "y":
			out.Values[i] = ec._Coordinates_y(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var databaseImplementors = []string{"Database"}

func (ec *executionContext) _Database(ctx context.Context, sel ast.SelectionSet, obj *model.Database) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Database")
		case "clusterName":
			out.Values[i] = ec._Database_clusterName(ctx, field, obj)
		case "healthy":
			out.Values[i] = ec._Database_healthy(ctx, field, obj)
		case "serverName":
			out.Values[i] = ec._Database_serverName(ctx, field, obj)
		case "serverVersion":
			out.Values[i] = ec._Database_serverVersion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var databaseInfoImplementors = []string{"DatabaseInfo"}

func (ec *executionContext) _DatabaseInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseInfo")
		case "healthy":
			out.Values[i] = ec._DatabaseInfo_healthy(ctx, field, obj)
		case "clusterName":
			out.Values[i] = ec._DatabaseInfo_clusterName(ctx, field, obj)
		case "serverName":
			out.Values[i] = ec._DatabaseInfo_serverName(ctx, field, obj)
		case "serverVersion":
			out.Values[i] = ec._DatabaseInfo_serverVersion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var declensionTranslationResultImplementors = []string{"DeclensionTranslationResult"}

func (ec *executionContext) _DeclensionTranslationResult(ctx context.Context, sel ast.SelectionSet, obj *model.DeclensionTranslationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, declensionTranslationResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeclensionTranslationResult")
		case "results":
			out.Values[i] = ec._DeclensionTranslationResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dialogueImplementors = []string{"Dialogue"}

func (ec *executionContext) _Dialogue(ctx context.Context, sel ast.SelectionSet, obj *model.Dialogue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dialogueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dialogue")
		case "introduction":
			out.Values[i] = ec._Dialogue_introduction(ctx, field, obj)
		case "speakers":
			out.Values[i] = ec._Dialogue_speakers(ctx, field, obj)
		case "section":
			out.Values[i] = ec._Dialogue_section(ctx, field, obj)
		case "linkToPerseus":
			out.Values[i] = ec._Dialogue_linkToPerseus(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dialogueAnswerImplementors = []string{"DialogueAnswer"}

func (ec *executionContext) _DialogueAnswer(ctx context.Context, sel ast.SelectionSet, obj *model.DialogueAnswer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dialogueAnswerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DialogueAnswer")
		case "percentage":
			out.Values[i] = ec._DialogueAnswer_percentage(ctx, field, obj)
		case "input":
			out.Values[i] = ec._DialogueAnswer_input(ctx, field, obj)
		case "answer":
			out.Values[i] = ec._DialogueAnswer_answer(ctx, field, obj)
		case "wronglyPlaced":
			out.Values[i] = ec._DialogueAnswer_wronglyPlaced(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dialogueContentImplementors = []string{"DialogueContent"}

func (ec *executionContext) _DialogueContent(ctx context.Context, sel ast.SelectionSet, obj *model.DialogueContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dialogueContentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DialogueContent")
		case "translation":
			out.Values[i] = ec._DialogueContent_translation(ctx, field, obj)
		case "greek":
			out.Values[i] = ec._DialogueContent_greek(ctx, field, obj)
		case "place":
			out.Values[i] = ec._DialogueContent_place(ctx, field, obj)
		case "speaker":
			out.Values[i] = ec._DialogueContent_speaker(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dialogueCorrectionImplementors = []string{"DialogueCorrection"}

func (ec *executionContext) _DialogueCorrection(ctx context.Context, sel ast.SelectionSet, obj *model.DialogueCorrection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dialogueCorrectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DialogueCorrection")
		case "translation":
			out.Values[i] = ec._DialogueCorrection_translation(ctx, field, obj)
		case "greek":
			out.Values[i] = ec._DialogueCorrection_greek(ctx, field, obj)
		case "place":
			out.Values[i] = ec._DialogueCorrection_place(ctx, field, obj)
		case "speaker":
			out.Values[i] = ec._DialogueCorrection_speaker(ctx, field, obj)
		case "correctPlace":
			out.Values[i] = ec._DialogueCorrection_correctPlace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dialogueQuizResponseImplementors = []string{"DialogueQuizResponse"}

func (ec *executionContext) _DialogueQuizResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DialogueQuizResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dialogueQuizResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DialogueQuizResponse")
		case "quizMetadata":
			out.Values[i] = ec._DialogueQuizResponse_quizMetadata(ctx, field, obj)
		case "theme":
			out.Values[i] = ec._DialogueQuizResponse_theme(ctx, field, obj)
		case "set":
			out.Values[i] = ec._DialogueQuizResponse_set(ctx, field, obj)
		case "segment":
			out.Values[i] = ec._DialogueQuizResponse_segment(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._DialogueQuizResponse_reference(ctx, field, obj)
		case "dialogue":
			out.Values[i] = ec._DialogueQuizResponse_dialogue(ctx, field, obj)
		case "content":
			out.Values[i] = ec._DialogueQuizResponse_content(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eSAuthorImplementors = []string{"ESAuthor"}

func (ec *executionContext) _ESAuthor(ctx context.Context, sel ast.SelectionSet, obj *model.ESAuthor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eSAuthorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ESAuthor")
		case "books":
			out.Values[i] = ec._ESAuthor_books(ctx, field, obj)
		case "key":
			out.Values[i] = ec._ESAuthor_key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eSBookImplementors = []string{"ESBook"}

func (ec *executionContext) _ESBook(ctx context.Context, sel ast.SelectionSet, obj *model.ESBook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eSBookImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ESBook")
		case "key":
			out.Values[i] = ec._ESBook_key(ctx, field, obj)
		case "references":
			out.Values[i] = ec._ESBook_references(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var extendedDictionaryImplementors = []string{"ExtendedDictionary"}

func (ec *executionContext) _ExtendedDictionary(ctx context.Context, sel ast.SelectionSet, obj *model.ExtendedDictionary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, extendedDictionaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExtendedDictionary")
		case "hits":
			out.Values[i] = ec._ExtendedDictionary_hits(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var extendedDictionaryEntryImplementors = []string{"ExtendedDictionaryEntry"}

func (ec *executionContext) _ExtendedDictionaryEntry(ctx context.Context, sel ast.SelectionSet, obj *model.ExtendedDictionaryEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, extendedDictionaryEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExtendedDictionaryEntry")
		case "foundInText":
			out.Values[i] = ec._ExtendedDictionaryEntry_foundInText(ctx, field, obj)
		case "hit":
			out.Values[i] = ec._ExtendedDictionaryEntry_hit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var finalTranslationQuizImplementors = []string{"FinalTranslationQuiz", "QuizSection"}

func (ec *executionContext) _FinalTranslationQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.FinalTranslationQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, finalTranslationQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FinalTranslationQuiz")
		case "instruction":
			out.Values[i] = ec._FinalTranslationQuiz_instruction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._FinalTranslationQuiz_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answer":
			out.Values[i] = ec._FinalTranslationQuiz_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarAnswerImplementors = []string{"GrammarAnswer"}

func (ec *executionContext) _GrammarAnswer(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarAnswer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarAnswerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarAnswer")
		case "correct":
			out.Values[i] = ec._GrammarAnswer_correct(ctx, field, obj)
		case "quizWord":
			out.Values[i] = ec._GrammarAnswer_quizWord(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._GrammarAnswer_progress(ctx, field, obj)
		case "similarWords":
			out.Values[i] = ec._GrammarAnswer_similarWords(ctx, field, obj)
		case "foundInText":
			out.Values[i] = ec._GrammarAnswer_foundInText(ctx, field, obj)
		case "finished":
			out.Values[i] = ec._GrammarAnswer_finished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarOptionImplementors = []string{"GrammarOption"}

func (ec *executionContext) _GrammarOption(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarOption")
		case "option":
			out.Values[i] = ec._GrammarOption_option(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarOptionsImplementors = []string{"GrammarOptions"}

func (ec *executionContext) _GrammarOptions(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarOptions")
		case "themes":
			out.Values[i] = ec._GrammarOptions_themes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarQuizAddedImplementors = []string{"GrammarQuizAdded"}

func (ec *executionContext) _GrammarQuizAdded(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarQuizAdded) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarQuizAddedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarQuizAdded")
		case "correctAnswer":
			out.Values[i] = ec._GrammarQuizAdded_correctAnswer(ctx, field, obj)
		case "wordInText":
			out.Values[i] = ec._GrammarQuizAdded_wordInText(ctx, field, obj)
		case "extraInformation":
			out.Values[i] = ec._GrammarQuizAdded_extraInformation(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GrammarQuizAdded_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarQuizResponseImplementors = []string{"GrammarQuizResponse"}

func (ec *executionContext) _GrammarQuizResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarQuizResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarQuizResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarQuizResponse")
		case "quizItem":
			out.Values[i] = ec._GrammarQuizResponse_quizItem(ctx, field, obj)
		case "dictionaryForm":
			out.Values[i] = ec._GrammarQuizResponse_dictionaryForm(ctx, field, obj)
		case "stem":
			out.Values[i] = ec._GrammarQuizResponse_stem(ctx, field, obj)
		case "translation":
			out.Values[i] = ec._GrammarQuizResponse_translation(ctx, field, obj)
		case "numberOfItems":
			out.Values[i] = ec._GrammarQuizResponse_numberOfItems(ctx, field, obj)
		case "description":
			out.Values[i] = ec._GrammarQuizResponse_description(ctx, field, obj)
		case "difficulty":
			out.Values[i] = ec._GrammarQuizResponse_difficulty(ctx, field, obj)
		case "contractionRule":
			out.Values[i] = ec._GrammarQuizResponse_contractionRule(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GrammarQuizResponse_options(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._GrammarQuizResponse_progress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarSegmentImplementors = []string{"GrammarSegment"}

func (ec *executionContext) _GrammarSegment(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarSegment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarSegmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarSegment")
		case "name":
			out.Values[i] = ec._GrammarSegment_name(ctx, field, obj)
		case "difficulty":
			out.Values[i] = ec._GrammarSegment_difficulty(ctx, field, obj)
		case "maxSet":
			out.Values[i] = ec._GrammarSegment_maxSet(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var grammarThemesImplementors = []string{"GrammarThemes"}

func (ec *executionContext) _GrammarThemes(ctx context.Context, sel ast.SelectionSet, obj *model.GrammarThemes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, grammarThemesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GrammarThemes")
		case "name":
			out.Values[i] = ec._GrammarThemes_name(ctx, field, obj)
		case "segments":
			out.Values[i] = ec._GrammarThemes_segments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var healthImplementors = []string{"Health"}

func (ec *executionContext) _Health(ctx context.Context, sel ast.SelectionSet, obj *model.Health) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, healthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Health")
		case "database":
			out.Values[i] = ec._Health_database(ctx, field, obj)
		case "healthy":
			out.Values[i] = ec._Health_healthy(ctx, field, obj)
		case "time":
			out.Values[i] = ec._Health_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hitImplementors = []string{"Hit"}

func (ec *executionContext) _Hit(ctx context.Context, sel ast.SelectionSet, obj *model.Hit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Hit")
		case "dutch":
			out.Values[i] = ec._Hit_dutch(ctx, field, obj)
		case "english":
			out.Values[i] = ec._Hit_english(ctx, field, obj)
		case "greek":
			out.Values[i] = ec._Hit_greek(ctx, field, obj)
		case "linkedWord":
			out.Values[i] = ec._Hit_linkedWord(ctx, field, obj)
		case "original":
			out.Values[i] = ec._Hit_original(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var journeyOptionsImplementors = []string{"JourneyOptions"}

func (ec *executionContext) _JourneyOptions(ctx context.Context, sel ast.SelectionSet, obj *model.JourneyOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, journeyOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JourneyOptions")
		case "themes":
			out.Values[i] = ec._JourneyOptions_themes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var journeySegmentImplementors = []string{"JourneySegment"}

func (ec *executionContext) _JourneySegment(ctx context.Context, sel ast.SelectionSet, obj *model.JourneySegment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, journeySegmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JourneySegment")
		case "name":
			out.Values[i] = ec._JourneySegment_name(ctx, field, obj)
		case "number":
			out.Values[i] = ec._JourneySegment_number(ctx, field, obj)
		case "location":
			out.Values[i] = ec._JourneySegment_location(ctx, field, obj)
		case "coordinates":
			out.Values[i] = ec._JourneySegment_coordinates(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var journeySegmentQuizImplementors = []string{"JourneySegmentQuiz"}

func (ec *executionContext) _JourneySegmentQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.JourneySegmentQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, journeySegmentQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JourneySegmentQuiz")
		case "theme":
			out.Values[i] = ec._JourneySegmentQuiz_theme(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "segment":
			out.Values[i] = ec._JourneySegmentQuiz_segment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "number":
			out.Values[i] = ec._JourneySegmentQuiz_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sentence":
			out.Values[i] = ec._JourneySegmentQuiz_sentence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "translation":
			out.Values[i] = ec._JourneySegmentQuiz_translation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contextNote":
			out.Values[i] = ec._JourneySegmentQuiz_contextNote(ctx, field, obj)
		case "intro":
			out.Values[i] = ec._JourneySegmentQuiz_intro(ctx, field, obj)
		case "quiz":
			out.Values[i] = ec._JourneySegmentQuiz_quiz(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var journeyThemesImplementors = []string{"JourneyThemes"}

func (ec *executionContext) _JourneyThemes(ctx context.Context, sel ast.SelectionSet, obj *model.JourneyThemes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, journeyThemesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JourneyThemes")
		case "name":
			out.Values[i] = ec._JourneyThemes_name(ctx, field, obj)
		case "segments":
			out.Values[i] = ec._JourneyThemes_segments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var matchQuizImplementors = []string{"MatchQuiz", "QuizSection"}

func (ec *executionContext) _MatchQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.MatchQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, matchQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MatchQuiz")
		case "instruction":
			out.Values[i] = ec._MatchQuiz_instruction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pairs":
			out.Values[i] = ec._MatchQuiz_pairs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaOptionsImplementors = []string{"MediaOptions"}

func (ec *executionContext) _MediaOptions(ctx context.Context, sel ast.SelectionSet, obj *model.MediaOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaOptions")
		case "audioUrl":
			out.Values[i] = ec._MediaOptions_audioUrl(ctx, field, obj)
		case "imageUrl":
			out.Values[i] = ec._MediaOptions_imageUrl(ctx, field, obj)
		case "option":
			out.Values[i] = ec._MediaOptions_option(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaPairImplementors = []string{"MediaPair"}

func (ec *executionContext) _MediaPair(ctx context.Context, sel ast.SelectionSet, obj *model.MediaPair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaPairImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaPair")
		case "word":
			out.Values[i] = ec._MediaPair_word(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answer":
			out.Values[i] = ec._MediaPair_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaQuizImplementors = []string{"MediaQuiz", "QuizSection"}

func (ec *executionContext) _MediaQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.MediaQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaQuiz")
		case "instruction":
			out.Values[i] = ec._MediaQuiz_instruction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mediaFiles":
			out.Values[i] = ec._MediaQuiz_mediaFiles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaQuizResponseImplementors = []string{"MediaQuizResponse"}

func (ec *executionContext) _MediaQuizResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MediaQuizResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaQuizResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaQuizResponse")
		case "numberOfItems":
			out.Values[i] = ec._MediaQuizResponse_numberOfItems(ctx, field, obj)
		case "options":
			out.Values[i] = ec._MediaQuizResponse_options(ctx, field, obj)
		case "quizItem":
			out.Values[i] = ec._MediaQuizResponse_quizItem(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MediaQuizResponse_progress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var multipleChoiceResponseImplementors = []string{"MultipleChoiceResponse"}

func (ec *executionContext) _MultipleChoiceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MultipleChoiceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, multipleChoiceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MultipleChoiceResponse")
		case "numberOfItems":
			out.Values[i] = ec._MultipleChoiceResponse_numberOfItems(ctx, field, obj)
		case "options":
			out.Values[i] = ec._MultipleChoiceResponse_options(ctx, field, obj)
		case "quizItem":
			out.Values[i] = ec._MultipleChoiceResponse_quizItem(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MultipleChoiceResponse_progress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var multipleThemeImplementors = []string{"MultipleTheme"}

func (ec *executionContext) _MultipleTheme(ctx context.Context, sel ast.SelectionSet, obj *model.MultipleTheme) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, multipleThemeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MultipleTheme")
		case "name":
			out.Values[i] = ec._MultipleTheme_name(ctx, field, obj)
		case "maxSet":
			out.Values[i] = ec._MultipleTheme_maxSet(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var optionsImplementors = []string{"Options"}

func (ec *executionContext) _Options(ctx context.Context, sel ast.SelectionSet, obj *model.Options) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Options")
		case "option":
			out.Values[i] = ec._Options_option(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var progressEntryImplementors = []string{"ProgressEntry"}

func (ec *executionContext) _ProgressEntry(ctx context.Context, sel ast.SelectionSet, obj *model.ProgressEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgressEntry")
		case "greek":
			out.Values[i] = ec._ProgressEntry_greek(ctx, field, obj)
		case "translation":
			out.Values[i] = ec._ProgressEntry_translation(ctx, field, obj)
		case "playCount":
			out.Values[i] = ec._ProgressEntry_playCount(ctx, field, obj)
		case "correctCount":
			out.Values[i] = ec._ProgressEntry_correctCount(ctx, field, obj)
		case "incorrectCount":
			out.Values[i] = ec._ProgressEntry_incorrectCount(ctx, field, obj)
		case "lastPlayed":
			out.Values[i] = ec._ProgressEntry_lastPlayed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "health":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_health(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "multipleChoiceOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_multipleChoiceOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authorBasedOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authorBasedOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dialogueOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dialogueOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "grammarOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grammarOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "journeyOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_journeyOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaAnswer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaAnswer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "multipleChoiceAnswer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_multipleChoiceAnswer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "multipleChoiceQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_multipleChoiceQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authorBasedAnswer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authorBasedAnswer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authorBasedQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authorBasedQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authorBasedWordForms":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authorBasedWordForms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dialogueAnswer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dialogueAnswer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dialogueQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dialogueQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "grammarQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grammarQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "grammarAnswer":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grammarAnswer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "journeyQuiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_journeyQuiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "analyze":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_analyze(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "check":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_check(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "create":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_create(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dictionary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dictionary(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "grammar":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grammar(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "status":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_status(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "textOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_textOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizIntroImplementors = []string{"QuizIntro"}

func (ec *executionContext) _QuizIntro(ctx context.Context, sel ast.SelectionSet, obj *model.QuizIntro) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizIntroImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizIntro")
		case "author":
			out.Values[i] = ec._QuizIntro_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "work":
			out.Values[i] = ec._QuizIntro_work(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "background":
			out.Values[i] = ec._QuizIntro_background(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizMetadataImplementors = []string{"QuizMetadata"}

func (ec *executionContext) _QuizMetadata(ctx context.Context, sel ast.SelectionSet, obj *model.QuizMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizMetadata")
		case "language":
			out.Values[i] = ec._QuizMetadata_language(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizPairImplementors = []string{"QuizPair"}

func (ec *executionContext) _QuizPair(ctx context.Context, sel ast.SelectionSet, obj *model.QuizPair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizPairImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizPair")
		case "greek":
			out.Values[i] = ec._QuizPair_greek(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answer":
			out.Values[i] = ec._QuizPair_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var referenceImplementors = []string{"Reference"}

func (ec *executionContext) _Reference(ctx context.Context, sel ast.SelectionSet, obj *model.Reference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, referenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reference")
		case "key":
			out.Values[i] = ec._Reference_key(ctx, field, obj)
		case "sections":
			out.Values[i] = ec._Reference_sections(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var resultImplementors = []string{"Result"}

func (ec *executionContext) _Result(ctx context.Context, sel ast.SelectionSet, obj *model.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Result")
		case "rootWord":
			out.Values[i] = ec._Result_rootWord(ctx, field, obj)
		case "rule":
			out.Values[i] = ec._Result_rule(ctx, field, obj)
		case "translations":
			out.Values[i] = ec._Result_translations(ctx, field, obj)
		case "word":
			out.Values[i] = ec._Result_word(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rhemaImplementors = []string{"Rhema"}

func (ec *executionContext) _Rhema(ctx context.Context, sel ast.SelectionSet, obj *model.Rhema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rhemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Rhema")
		case "greek":
			out.Values[i] = ec._Rhema_greek(ctx, field, obj)
		case "section":
			out.Values[i] = ec._Rhema_section(ctx, field, obj)
		case "translations":
			out.Values[i] = ec._Rhema_translations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sectionImplementors = []string{"Section"}

func (ec *executionContext) _Section(ctx context.Context, sel ast.SelectionSet, obj *model.Section) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Section")
		case "key":
			out.Values[i] = ec._Section_key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var segmentImplementors = []string{"Segment"}

func (ec *executionContext) _Segment(ctx context.Context, sel ast.SelectionSet, obj *model.Segment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, segmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Segment")
		case "name":
			out.Values[i] = ec._Segment_name(ctx, field, obj)
		case "maxSet":
			out.Values[i] = ec._Segment_maxSet(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var segmentsImplementors = []string{"Segments"}

func (ec *executionContext) _Segments(ctx context.Context, sel ast.SelectionSet, obj *model.Segments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, segmentsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Segments")
		case "maxSet":
			out.Values[i] = ec._Segments_maxSet(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Segments_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var serviceHealthImplementors = []string{"ServiceHealth"}

func (ec *executionContext) _ServiceHealth(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceHealth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceHealthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceHealth")
		case "name":
			out.Values[i] = ec._ServiceHealth_name(ctx, field, obj)
		case "healthy":
			out.Values[i] = ec._ServiceHealth_healthy(ctx, field, obj)
		case "version":
			out.Values[i] = ec._ServiceHealth_version(ctx, field, obj)
		case "databaseInfo":
			out.Values[i] = ec._ServiceHealth_databaseInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var speakerImplementors = []string{"Speaker"}

func (ec *executionContext) _Speaker(ctx context.Context, sel ast.SelectionSet, obj *model.Speaker) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, speakerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Speaker")
		case "name":
			out.Values[i] = ec._Speaker_name(ctx, field, obj)
		case "shorthand":
			out.Values[i] = ec._Speaker_shorthand(ctx, field, obj)
		case "translation":
			out.Values[i] = ec._Speaker_translation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statusImplementors = []string{"Status"}

func (ec *executionContext) _Status(ctx context.Context, sel ast.SelectionSet, obj *model.Status) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Status")
		case "alexandros":
			out.Values[i] = ec._Status_alexandros(ctx, field, obj)
		case "dionysios":
			out.Values[i] = ec._Status_dionysios(ctx, field, obj)
		case "herodotos":
			out.Values[i] = ec._Status_herodotos(ctx, field, obj)
		case "overallHealth":
			out.Values[i] = ec._Status_overallHealth(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var structureQuizImplementors = []string{"StructureQuiz", "QuizSection"}

func (ec *executionContext) _StructureQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.StructureQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, structureQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StructureQuiz")
		case "title":
			out.Values[i] = ec._StructureQuiz_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._StructureQuiz_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "question":
			out.Values[i] = ec._StructureQuiz_question(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._StructureQuiz_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answer":
			out.Values[i] = ec._StructureQuiz_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note":
			out.Values[i] = ec._StructureQuiz_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var textImplementors = []string{"Text"}

func (ec *executionContext) _Text(ctx context.Context, sel ast.SelectionSet, obj *model.Text) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, textImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Text")
		case "author":
			out.Values[i] = ec._Text_author(ctx, field, obj)
		case "book":
			out.Values[i] = ec._Text_book(ctx, field, obj)
		case "perseusTextLink":
			out.Values[i] = ec._Text_perseusTextLink(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Text_reference(ctx, field, obj)
		case "rhemai":
			out.Values[i] = ec._Text_rhemai(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Text_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var themeImplementors = []string{"Theme"}

func (ec *executionContext) _Theme(ctx context.Context, sel ast.SelectionSet, obj *model.Theme) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, themeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Theme")
		case "name":
			out.Values[i] = ec._Theme_name(ctx, field, obj)
		case "segments":
			out.Values[i] = ec._Theme_segments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var themedOptionsImplementors = []string{"ThemedOptions"}

func (ec *executionContext) _ThemedOptions(ctx context.Context, sel ast.SelectionSet, obj *model.ThemedOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, themedOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThemedOptions")
		case "themes":
			out.Values[i] = ec._ThemedOptions_themes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var themesImplementors = []string{"Themes"}

func (ec *executionContext) _Themes(ctx context.Context, sel ast.SelectionSet, obj *model.Themes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, themesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Themes")
		case "name":
			out.Values[i] = ec._Themes_name(ctx, field, obj)
		case "segments":
			out.Values[i] = ec._Themes_segments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var triviaQuizImplementors = []string{"TriviaQuiz", "QuizSection"}

func (ec *executionContext) _TriviaQuiz(ctx context.Context, sel ast.SelectionSet, obj *model.TriviaQuiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, triviaQuizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TriviaQuiz")
		case "question":
			out.Values[i] = ec._TriviaQuiz_question(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._TriviaQuiz_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answer":
			out.Values[i] = ec._TriviaQuiz_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note":
			out.Values[i] = ec._TriviaQuiz_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typoImplementors = []string{"Typo"}

func (ec *executionContext) _Typo(ctx context.Context, sel ast.SelectionSet, obj *model.Typo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Typo")
		case "provided":
			out.Values[i] = ec._Typo_provided(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Typo_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v any) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMediaPair2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaPairᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MediaPair) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMediaPair2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaPair(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMediaPair2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaPair(ctx context.Context, sel ast.SelectionSet, v *model.MediaPair) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaPair(ctx, sel, v)
}

func (ec *executionContext) marshalNQuizPair2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizPairᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QuizPair) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuizPair2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizPair(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuizPair2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizPair(ctx context.Context, sel ast.SelectionSet, v *model.QuizPair) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuizPair(ctx, sel, v)
}

func (ec *executionContext) marshalNQuizSection2githubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizSection(ctx context.Context, sel ast.SelectionSet, v model.QuizSection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuizSection(ctx, sel, v)
}

func (ec *executionContext) marshalNQuizSection2ᚕgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizSectionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.QuizSection) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuizSection2githubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAggregatedHealthResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregatedHealthResponse(ctx context.Context, sel ast.SelectionSet, v *model.AggregatedHealthResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AggregatedHealthResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOAggregatedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregatedOptions(ctx context.Context, sel ast.SelectionSet, v *model.AggregatedOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AggregatedOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOAggregationResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAggregationResult(ctx context.Context, sel ast.SelectionSet, v *model.AggregationResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AggregationResult(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyzeResult2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeResult(ctx context.Context, sel ast.SelectionSet, v []*model.AnalyzeResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnalyzeResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnalyzeResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeResult(ctx context.Context, sel ast.SelectionSet, v *model.AnalyzeResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyzeResult(ctx, sel, v)
}

func (ec *executionContext) marshalOAnalyzeTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnalyzeTextResponse(ctx context.Context, sel ast.SelectionSet, v *model.AnalyzeTextResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyzeTextResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOAnswerSection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnswerSection(ctx context.Context, sel ast.SelectionSet, v []*model.AnswerSection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnswerSection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnswerSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnswerSection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAnswerSection(ctx context.Context, sel ast.SelectionSet, v *model.AnswerSection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnswerSection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthorBasedAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedAnswerInput(ctx context.Context, v any) (*model.AuthorBasedAnswerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthorBasedAnswerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthorBasedAnswerResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedAnswerResponse(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedAnswerResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedAnswerResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthorBasedInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedInput(ctx context.Context, v any) (*model.AuthorBasedInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthorBasedInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthorBasedOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedOptions(ctx context.Context, sel ast.SelectionSet, v []*model.AuthorBasedOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthorBasedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedOptions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAuthorBasedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedOptions(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthorBasedQuiz2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedQuiz(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedQuiz) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedQuiz(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthorBasedResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedResponse(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthorBasedWordForm2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordForm(ctx context.Context, sel ast.SelectionSet, v []*model.AuthorBasedWordForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthorBasedWordForm2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAuthorBasedWordForm2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordForm(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedWordForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedWordForm(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthorBasedWordFormsInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordFormsInput(ctx context.Context, v any) (*model.AuthorBasedWordFormsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuthorBasedWordFormsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthorBasedWordFormsResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐAuthorBasedWordFormsResponse(ctx context.Context, sel ast.SelectionSet, v *model.AuthorBasedWordFormsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthorBasedWordFormsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCheckTextRequestInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCheckTextRequestInput(ctx context.Context, v any) (*model.CheckTextRequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCheckTextRequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCheckTextResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCheckTextResponse(ctx context.Context, sel ast.SelectionSet, v *model.CheckTextResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckTextResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOComprehensiveResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐComprehensiveResponse(ctx context.Context, sel ast.SelectionSet, v *model.ComprehensiveResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComprehensiveResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOConjugationResponse2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐConjugationResponse(ctx context.Context, sel ast.SelectionSet, v []*model.ConjugationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConjugationResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐConjugationResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConjugationResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐConjugationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ConjugationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConjugationResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOCoordinates2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCoordinates(ctx context.Context, sel ast.SelectionSet, v *model.Coordinates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Coordinates(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreateTextInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐCreateTextInput(ctx context.Context, v any) (*model.CreateTextInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateTextInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODatabase2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDatabase(ctx context.Context, sel ast.SelectionSet, v *model.Database) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Database(ctx, sel, v)
}

func (ec *executionContext) marshalODatabaseInfo2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDatabaseInfo(ctx context.Context, sel ast.SelectionSet, v *model.DatabaseInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DatabaseInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODeclensionTranslationResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDeclensionTranslationResult(ctx context.Context, sel ast.SelectionSet, v *model.DeclensionTranslationResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeclensionTranslationResult(ctx, sel, v)
}

func (ec *executionContext) marshalODialogue2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogue(ctx context.Context, sel ast.SelectionSet, v *model.Dialogue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Dialogue(ctx, sel, v)
}

func (ec *executionContext) marshalODialogueAnswer2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueAnswer(ctx context.Context, sel ast.SelectionSet, v *model.DialogueAnswer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DialogueAnswer(ctx, sel, v)
}

func (ec *executionContext) unmarshalODialogueAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueAnswerInput(ctx context.Context, v any) (*model.DialogueAnswerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDialogueAnswerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODialogueContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx context.Context, sel ast.SelectionSet, v []*model.DialogueContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODialogueContent2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODialogueContent2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueContent(ctx context.Context, sel ast.SelectionSet, v *model.DialogueContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DialogueContent(ctx, sel, v)
}

func (ec *executionContext) marshalODialogueCorrection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueCorrection(ctx context.Context, sel ast.SelectionSet, v []*model.DialogueCorrection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODialogueCorrection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueCorrection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODialogueCorrection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueCorrection(ctx context.Context, sel ast.SelectionSet, v *model.DialogueCorrection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DialogueCorrection(ctx, sel, v)
}

func (ec *executionContext) unmarshalODialogueInputContent2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueInputContent(ctx context.Context, v any) ([]*model.DialogueInputContent, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.DialogueInputContent, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODialogueInputContent2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueInputContent(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODialogueInputContent2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueInputContent(ctx context.Context, v any) (*model.DialogueInputContent, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDialogueInputContent(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODialogueQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueQuizInput(ctx context.Context, v any) (*model.DialogueQuizInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDialogueQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODialogueQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐDialogueQuizResponse(ctx context.Context, sel ast.SelectionSet, v *model.DialogueQuizResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DialogueQuizResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOESAuthor2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESAuthor(ctx context.Context, sel ast.SelectionSet, v []*model.ESAuthor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOESAuthor2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESAuthor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOESAuthor2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESAuthor(ctx context.Context, sel ast.SelectionSet, v *model.ESAuthor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ESAuthor(ctx, sel, v)
}

func (ec *executionContext) marshalOESBook2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESBook(ctx context.Context, sel ast.SelectionSet, v []*model.ESBook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOESBook2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESBook(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOESBook2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐESBook(ctx context.Context, sel ast.SelectionSet, v *model.ESBook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ESBook(ctx, sel, v)
}

func (ec *executionContext) marshalOExtendedDictionary2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionary(ctx context.Context, sel ast.SelectionSet, v *model.ExtendedDictionary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExtendedDictionary(ctx, sel, v)
}

func (ec *executionContext) marshalOExtendedDictionaryEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionaryEntry(ctx context.Context, sel ast.SelectionSet, v []*model.ExtendedDictionaryEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOExtendedDictionaryEntry2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionaryEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOExtendedDictionaryEntry2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐExtendedDictionaryEntry(ctx context.Context, sel ast.SelectionSet, v *model.ExtendedDictionaryEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExtendedDictionaryEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGrammarAnswer2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarAnswer(ctx context.Context, sel ast.SelectionSet, v *model.GrammarAnswer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarAnswer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGrammarAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarAnswerInput(ctx context.Context, v any) (*model.GrammarAnswerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGrammarAnswerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGrammarOption2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOption(ctx context.Context, sel ast.SelectionSet, v []*model.GrammarOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGrammarOption2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGrammarOption2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOption(ctx context.Context, sel ast.SelectionSet, v *model.GrammarOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarOption(ctx, sel, v)
}

func (ec *executionContext) marshalOGrammarOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarOptions(ctx context.Context, sel ast.SelectionSet, v *model.GrammarOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOGrammarQuizAdded2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizAdded(ctx context.Context, sel ast.SelectionSet, v []*model.GrammarQuizAdded) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGrammarQuizAdded2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizAdded(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGrammarQuizAdded2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizAdded(ctx context.Context, sel ast.SelectionSet, v *model.GrammarQuizAdded) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarQuizAdded(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGrammarQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizInput(ctx context.Context, v any) (*model.GrammarQuizInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGrammarQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGrammarQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarQuizResponse(ctx context.Context, sel ast.SelectionSet, v *model.GrammarQuizResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarQuizResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGrammarSegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarSegment(ctx context.Context, sel ast.SelectionSet, v []*model.GrammarSegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGrammarSegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarSegment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGrammarSegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarSegment(ctx context.Context, sel ast.SelectionSet, v *model.GrammarSegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarSegment(ctx, sel, v)
}

func (ec *executionContext) marshalOGrammarThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarThemes(ctx context.Context, sel ast.SelectionSet, v []*model.GrammarThemes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGrammarThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarThemes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGrammarThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐGrammarThemes(ctx context.Context, sel ast.SelectionSet, v *model.GrammarThemes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GrammarThemes(ctx, sel, v)
}

func (ec *executionContext) marshalOHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHealth(ctx context.Context, sel ast.SelectionSet, v *model.Health) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Health(ctx, sel, v)
}

func (ec *executionContext) marshalOHit2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx context.Context, sel ast.SelectionSet, v []*model.Hit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHit2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOHit2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐHit(ctx context.Context, sel ast.SelectionSet, v *model.Hit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Hit(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) marshalOJourneyOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyOptions(ctx context.Context, sel ast.SelectionSet, v *model.JourneyOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JourneyOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJourneyQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyQuizInput(ctx context.Context, v any) (*model.JourneyQuizInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJourneyQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJourneySegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegment(ctx context.Context, sel ast.SelectionSet, v []*model.JourneySegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJourneySegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJourneySegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegment(ctx context.Context, sel ast.SelectionSet, v *model.JourneySegment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JourneySegment(ctx, sel, v)
}

func (ec *executionContext) marshalOJourneySegmentQuiz2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneySegmentQuiz(ctx context.Context, sel ast.SelectionSet, v *model.JourneySegmentQuiz) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JourneySegmentQuiz(ctx, sel, v)
}

func (ec *executionContext) marshalOJourneyThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyThemes(ctx context.Context, sel ast.SelectionSet, v []*model.JourneyThemes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJourneyThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyThemes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJourneyThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐJourneyThemes(ctx context.Context, sel ast.SelectionSet, v *model.JourneyThemes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JourneyThemes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMediaAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaAnswerInput(ctx context.Context, v any) (*model.MediaAnswerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaAnswerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMediaOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaOptions(ctx context.Context, sel ast.SelectionSet, v []*model.MediaOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMediaOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaOptions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMediaOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaOptions(ctx context.Context, sel ast.SelectionSet, v *model.MediaOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMediaQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaQuizInput(ctx context.Context, v any) (*model.MediaQuizInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMediaQuizResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMediaQuizResponse(ctx context.Context, sel ast.SelectionSet, v *model.MediaQuizResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaQuizResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMultipleChoiceAnswerInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleChoiceAnswerInput(ctx context.Context, v any) (*model.MultipleChoiceAnswerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMultipleChoiceAnswerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMultipleChoiceResponse2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleChoiceResponse(ctx context.Context, sel ast.SelectionSet, v *model.MultipleChoiceResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MultipleChoiceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMultipleQuizInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleQuizInput(ctx context.Context, v any) (*model.MultipleQuizInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMultipleQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMultipleTheme2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleTheme(ctx context.Context, sel ast.SelectionSet, v []*model.MultipleTheme) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMultipleTheme2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleTheme(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMultipleTheme2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐMultipleTheme(ctx context.Context, sel ast.SelectionSet, v *model.MultipleTheme) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MultipleTheme(ctx, sel, v)
}

func (ec *executionContext) marshalOOptions2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐOptions(ctx context.Context, sel ast.SelectionSet, v []*model.Options) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐOptions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐOptions(ctx context.Context, sel ast.SelectionSet, v *model.Options) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Options(ctx, sel, v)
}

func (ec *executionContext) marshalOProgressEntry2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx context.Context, sel ast.SelectionSet, v []*model.ProgressEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProgressEntry2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProgressEntry2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐProgressEntry(ctx context.Context, sel ast.SelectionSet, v *model.ProgressEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProgressEntry(ctx, sel, v)
}

func (ec *executionContext) marshalOQuizIntro2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizIntro(ctx context.Context, sel ast.SelectionSet, v *model.QuizIntro) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuizIntro(ctx, sel, v)
}

func (ec *executionContext) marshalOQuizMetadata2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐQuizMetadata(ctx context.Context, sel ast.SelectionSet, v *model.QuizMetadata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuizMetadata(ctx, sel, v)
}

func (ec *executionContext) marshalOReference2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v []*model.Reference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReference2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReference2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐReference(ctx context.Context, sel ast.SelectionSet, v *model.Reference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reference(ctx, sel, v)
}

func (ec *executionContext) marshalOResult2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v []*model.Result) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOResult2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v *model.Result) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Result(ctx, sel, v)
}

func (ec *executionContext) marshalORhema2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐRhema(ctx context.Context, sel ast.SelectionSet, v []*model.Rhema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORhema2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐRhema(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORhema2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐRhema(ctx context.Context, sel ast.SelectionSet, v *model.Rhema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Rhema(ctx, sel, v)
}

func (ec *executionContext) marshalOSection2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSection(ctx context.Context, sel ast.SelectionSet, v []*model.Section) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSection2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSection(ctx context.Context, sel ast.SelectionSet, v *model.Section) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Section(ctx, sel, v)
}

func (ec *executionContext) marshalOSegment2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegment(ctx context.Context, sel ast.SelectionSet, v []*model.Segment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSegment2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegment(ctx context.Context, sel ast.SelectionSet, v *model.Segment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Segment(ctx, sel, v)
}

func (ec *executionContext) marshalOSegments2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegments(ctx context.Context, sel ast.SelectionSet, v []*model.Segments) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSegments2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegments(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSegments2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSegments(ctx context.Context, sel ast.SelectionSet, v *model.Segments) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Segments(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceHealth2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐServiceHealth(ctx context.Context, sel ast.SelectionSet, v []*model.ServiceHealth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServiceHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐServiceHealth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOServiceHealth2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐServiceHealth(ctx context.Context, sel ast.SelectionSet, v *model.ServiceHealth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceHealth(ctx, sel, v)
}

func (ec *executionContext) marshalOSpeaker2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSpeaker(ctx context.Context, sel ast.SelectionSet, v []*model.Speaker) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSpeaker2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSpeaker(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSpeaker2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐSpeaker(ctx context.Context, sel ast.SelectionSet, v *model.Speaker) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Speaker(ctx, sel, v)
}

func (ec *executionContext) marshalOStatus2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v *model.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Status(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOText2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐText(ctx context.Context, sel ast.SelectionSet, v *model.Text) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Text(ctx, sel, v)
}

func (ec *executionContext) marshalOTheme2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTheme(ctx context.Context, sel ast.SelectionSet, v []*model.Theme) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTheme2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTheme(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTheme2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTheme(ctx context.Context, sel ast.SelectionSet, v *model.Theme) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Theme(ctx, sel, v)
}

func (ec *executionContext) marshalOThemedOptions2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemedOptions(ctx context.Context, sel ast.SelectionSet, v *model.ThemedOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ThemedOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOThemes2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemes(ctx context.Context, sel ast.SelectionSet, v []*model.Themes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOThemes2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐThemes(ctx context.Context, sel ast.SelectionSet, v *model.Themes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Themes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTranslationsInput2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTranslationsInput(ctx context.Context, v any) ([]*model.TranslationsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.TranslationsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTranslationsInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTranslationsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTranslationsInput2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTranslationsInput(ctx context.Context, v any) (*model.TranslationsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTranslationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTypo2ᚕᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTypo(ctx context.Context, sel ast.SelectionSet, v []*model.Typo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTypo2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTypo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTypo2ᚖgithubᚗcomᚋodysseiaᚑgreekᚋolympiaᚋhomerosᚋgraphᚋmodelᚐTypo(ctx context.Context, sel ast.SelectionSet, v *model.Typo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Typo(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
