schema {
  query: RootQuery
}

type Aggregate {
  highestSet: String
  name: String
}

type AggregateResult {
  aggregates: [Aggregate]
}

type AggregationResult {
  authors: [ESAuthor]
}

type AnalyzeResult {
  author: String
  book: String
  reference: String
  referenceLink: String
  text: Rhema
}

type AnalyzeTextResponse {
  conjugations: [ConjugationResponse]
  results: [AnalyzeResult]
  rootword: String
}

type AnswerSection {
  answerSentence: String
  levenshteinPercentage: String
  quizSentence: String
  section: String
}

union AnswerUnion = ComprehensiveResponse | DialogueAnswer | AuthorBasedAnswer

type AuthorBasedAnswer {
  correct: Boolean
  numberOfItems: Int
  quizWord: String
  wordsInText: [String]
}

type AuthorBasedQuizType {
  fullSentence: String
  quiz: QuizResponse
  reference: String
  translation: String
}

input CheckTextRequestInput {
  author: String
  book: String
  reference: String
  translations: [TranslationsInput]
}

type CheckTextResponse {
  averageLevenshteinPercentage: String
  possibleTypos: [Typo]
  sections: [AnswerSection]
}

type ComprehensiveResponse {
  correct: Boolean
  foundInText: AnalyzeTextResponse
  progress: Progress
  quizWord: String
  similarWords: [Hit]
}

type ConjugationResponse {
  rule: String
  word: String
}

input CreateTextInput {
  author: String
  book: String
  reference: String
  section: String
}

type Database {
  clusterName: String
  healthy: Boolean
  serverName: String
  serverVersion: String
}

type Dialogue {
  introduction: String
  linkToPerseus: String
  section: String
  speakers: [Speaker]
}

type DialogueAnswer {
  answer: [DialogueContent]
  input: [DialogueContent]
  percentage: Float
  wronglyPlaced: [DialogueCorrection]
}

type DialogueContent {
  greek: String
  place: Int
  speaker: String
  translation: String
}

type DialogueCorrection {
  correctPlace: Int
  greek: String
  place: Int
  speaker: String
  translation: String
}

input DialogueInput {
  speaker: String
  translation: String
  greek: String
  place: Int
}

type DialogueQuiz {
  content: [DialogueContent]
  dialogue: Dialogue
  quizMetadata: QuizMetadata
  quizType: String
  set: Int
  theme: String
}

type ESAuthor {
  books: [ESBook]
  key: String
}

type ESBook {
  key: String
  references: [Reference]
}

type ExtendedDictionary {
  hits: [ExtendedDictionaryEntry]
}

type ExtendedDictionaryEntry {
  foundInText: AnalyzeTextResponse
  hit: Hit
}

type Health {
  database: Database
  healthy: Boolean
  time: String
}

type Hit {
  dutch: String
  english: String
  greek: String
  linkedWord: String
  original: String
}

type Options {
  audioUrl: String
  imageUrl: String
  option: String
}

type Progress {
  averageAccuracy: Float
  timesCorrect: Int
  timesIncorrect: Int
}

type QuizMetadata {
  language: String
}

type QuizResponse {
  options: [Options]
  quizItem: String
}

union QuizResponseUnion = QuizResponse | DialogueQuiz | AuthorBasedQuizType

type Reference {
  key: String
  sections: [Section]
}

type Result {
  rootWord: String
  rule: String
  translation: [String]
  word: String
}

type Rhema {
  greek: String
  section: String
  translations: [String]
}

type RootQuery {
  """analyze text based on a rootword"""
  analyze(rootword: String): AnalyzeTextResponse
  answer(answer: String, comprehensive: Boolean, dialogue: [DialogueInput], theme: String, set: String, quizType: String, quizWord: String): AnswerUnion

  """Check the text given"""
  check(input: CheckTextRequestInput): CheckTextResponse

  """Create a new Text in Herodotos"""
  create(input: CreateTextInput): Text

  """Search Alexandros dictionary for a word"""
  dictionary(language: String = "", mode: String = "", searchInText: Boolean = false, word: String): ExtendedDictionary

  """Search Dionysios for grammar results"""
  grammar(word: String): [Result]

  """returns the options for a specific quiztype"""
  options(quizType: String): AggregateResult
  quiz(theme: String, set: String, quizType: String, order: String, excludeWords: [String]): QuizResponseUnion

  """See if the backendApis are healthy"""
  status: Status

  """Fetch options from Herodotos"""
  textOptions: AggregationResult
}

type Section {
  key: String
}

type Speaker {
  name: String
  shorthand: String
  translation: String
}

"""The way to check whether backend apis are available"""
type Status {
  alexandros: Health
  dionysios: Health
  herodotos: Health
  overallHealth: Boolean
  sokrates: Health
}

type Text {
  author: String
  book: String
  perseusTextLink: String
  reference: String
  rhemai: [Rhema]
  type: String
}

input TranslationsInput {
  section: String
  translation: String
}

type Typo {
  provided: String
  source: String
}

