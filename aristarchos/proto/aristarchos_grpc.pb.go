// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/aristarchos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AristarchosClient is the client API for Aristarchos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AristarchosClient interface {
	CreateNewEntry(ctx context.Context, opts ...grpc.CallOption) (Aristarchos_CreateNewEntryClient, error)
	RetrieveEntry(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*RootWordResponse, error)
	RetrieveRootFromGrammarForm(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*FormsResponse, error)
	RetrieveSearchWords(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*SearchWordResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type aristarchosClient struct {
	cc grpc.ClientConnInterface
}

func NewAristarchosClient(cc grpc.ClientConnInterface) AristarchosClient {
	return &aristarchosClient{cc}
}

func (c *aristarchosClient) CreateNewEntry(ctx context.Context, opts ...grpc.CallOption) (Aristarchos_CreateNewEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Aristarchos_ServiceDesc.Streams[0], "/olympia_aristarchos.Aristarchos/CreateNewEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &aristarchosCreateNewEntryClient{stream}
	return x, nil
}

type Aristarchos_CreateNewEntryClient interface {
	Send(*AggregatorCreationRequest) error
	CloseAndRecv() (*AggregatorStreamResponse, error)
	grpc.ClientStream
}

type aristarchosCreateNewEntryClient struct {
	grpc.ClientStream
}

func (x *aristarchosCreateNewEntryClient) Send(m *AggregatorCreationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aristarchosCreateNewEntryClient) CloseAndRecv() (*AggregatorStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AggregatorStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aristarchosClient) RetrieveEntry(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*RootWordResponse, error) {
	out := new(RootWordResponse)
	err := c.cc.Invoke(ctx, "/olympia_aristarchos.Aristarchos/RetrieveEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristarchosClient) RetrieveRootFromGrammarForm(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*FormsResponse, error) {
	out := new(FormsResponse)
	err := c.cc.Invoke(ctx, "/olympia_aristarchos.Aristarchos/RetrieveRootFromGrammarForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristarchosClient) RetrieveSearchWords(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*SearchWordResponse, error) {
	out := new(SearchWordResponse)
	err := c.cc.Invoke(ctx, "/olympia_aristarchos.Aristarchos/RetrieveSearchWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristarchosClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/olympia_aristarchos.Aristarchos/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AristarchosServer is the server API for Aristarchos service.
// All implementations must embed UnimplementedAristarchosServer
// for forward compatibility
type AristarchosServer interface {
	CreateNewEntry(Aristarchos_CreateNewEntryServer) error
	RetrieveEntry(context.Context, *AggregatorRequest) (*RootWordResponse, error)
	RetrieveRootFromGrammarForm(context.Context, *AggregatorRequest) (*FormsResponse, error)
	RetrieveSearchWords(context.Context, *AggregatorRequest) (*SearchWordResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedAristarchosServer()
}

// UnimplementedAristarchosServer must be embedded to have forward compatible implementations.
type UnimplementedAristarchosServer struct {
}

func (UnimplementedAristarchosServer) CreateNewEntry(Aristarchos_CreateNewEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNewEntry not implemented")
}
func (UnimplementedAristarchosServer) RetrieveEntry(context.Context, *AggregatorRequest) (*RootWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveEntry not implemented")
}
func (UnimplementedAristarchosServer) RetrieveRootFromGrammarForm(context.Context, *AggregatorRequest) (*FormsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRootFromGrammarForm not implemented")
}
func (UnimplementedAristarchosServer) RetrieveSearchWords(context.Context, *AggregatorRequest) (*SearchWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSearchWords not implemented")
}
func (UnimplementedAristarchosServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAristarchosServer) mustEmbedUnimplementedAristarchosServer() {}

// UnsafeAristarchosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AristarchosServer will
// result in compilation errors.
type UnsafeAristarchosServer interface {
	mustEmbedUnimplementedAristarchosServer()
}

func RegisterAristarchosServer(s grpc.ServiceRegistrar, srv AristarchosServer) {
	s.RegisterService(&Aristarchos_ServiceDesc, srv)
}

func _Aristarchos_CreateNewEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AristarchosServer).CreateNewEntry(&aristarchosCreateNewEntryServer{stream})
}

type Aristarchos_CreateNewEntryServer interface {
	SendAndClose(*AggregatorStreamResponse) error
	Recv() (*AggregatorCreationRequest, error)
	grpc.ServerStream
}

type aristarchosCreateNewEntryServer struct {
	grpc.ServerStream
}

func (x *aristarchosCreateNewEntryServer) SendAndClose(m *AggregatorStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aristarchosCreateNewEntryServer) Recv() (*AggregatorCreationRequest, error) {
	m := new(AggregatorCreationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Aristarchos_RetrieveEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristarchosServer).RetrieveEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olympia_aristarchos.Aristarchos/RetrieveEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristarchosServer).RetrieveEntry(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristarchos_RetrieveRootFromGrammarForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristarchosServer).RetrieveRootFromGrammarForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olympia_aristarchos.Aristarchos/RetrieveRootFromGrammarForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristarchosServer).RetrieveRootFromGrammarForm(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristarchos_RetrieveSearchWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristarchosServer).RetrieveSearchWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olympia_aristarchos.Aristarchos/RetrieveSearchWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristarchosServer).RetrieveSearchWords(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristarchos_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristarchosServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olympia_aristarchos.Aristarchos/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristarchosServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aristarchos_ServiceDesc is the grpc.ServiceDesc for Aristarchos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aristarchos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olympia_aristarchos.Aristarchos",
	HandlerType: (*AristarchosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveEntry",
			Handler:    _Aristarchos_RetrieveEntry_Handler,
		},
		{
			MethodName: "RetrieveRootFromGrammarForm",
			Handler:    _Aristarchos_RetrieveRootFromGrammarForm_Handler,
		},
		{
			MethodName: "RetrieveSearchWords",
			Handler:    _Aristarchos_RetrieveSearchWords_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Aristarchos_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateNewEntry",
			Handler:       _Aristarchos_CreateNewEntry_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/aristarchos.proto",
}
